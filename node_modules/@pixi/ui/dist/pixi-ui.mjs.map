{"version":3,"file":"pixi-ui.mjs","sources":["../src/Button.ts","../src/Switch.ts","../src/CheckBox.ts","../src/utils/helpers/hitbox.ts","../src/DoubleSlider.ts","../src/Input.ts","../src/Layout.ts","../src/MaskedFrame.ts","../src/RadioGroup.ts","../src/utils/trackpad/Spring.ts","../src/utils/trackpad/ScrollSpring.ts","../src/utils/trackpad/SlidingNumber.ts","../src/utils/trackpad/Trackpad.ts","../src/ScrollBox.ts","../src/Select.ts","../src/Slider.ts"],"sourcesContent":["import { utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\n\nexport interface ButtonOptions\n{\n    view: Container;\n    hoverView?: Container;\n    pressedView?: Container;\n    disabledView?: Container;\n    textView?: Text;\n    padding?: number;\n    textOffset?: { x: number; y: number };\n}\n\n/**\n * Container based component that gives us a starting point for UI buttons.\n * It composes a view rather than extends one, this means we can easily make any pixi container a button!\n * @example\n * ```\n * const spriteButton = new Button({\n *     view: new PixiSprite(Texture.from(`button.png`)),\n *     hoverView: new PixiSprite(Texture.from(`button_hover.png`)),\n *     pressedView: new PixiSprite(Texture.from(`button_pressed.png`)),\n *     disabledView: new PixiSprite(Texture.from(`button_disabled.png`)),\n *     textView: new Text(text, { fill: 0xFFFFFF }),\n * });\n *\n * const graphicsButton = new Button({\n *     view: new PixiGraphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius),\n *     hoverView: new PixiGraphics().beginFill(hoverColor).drawRoundedRect(0, 0, width, height, radius),\n *     pressedView: new PixiGraphics().beginFill(pressedColor).drawRoundedRect(0, 0, width, height, radius),\n *     disabledView: new PixiGraphics().beginFill(disabledColor).drawRoundedRect(0, 0, width, height, radius),\n *     textView: new Text(text, { fill: 0xFFFFFF }),\n *     padding: 10,\n *     textOffset: { x: 10, y: 1 },\n * });\n *\n * ```\n */\nexport class Button extends Container\n{\n    /** TODO */\n    public defaultView: Container;\n    /** TODO */\n    public hoverView: Container;\n    /** TODO */\n    public pressedView: Container;\n    /** TODO */\n    public disabledView: Container;\n    /** TODO */\n    public text: Text;\n\n    /** TODO */\n    public onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** TODO */\n    public onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** TODO */\n    public onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** TODO */\n    public onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** TODO */\n    public onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** TODO */\n    public onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    private _isDown: boolean;\n    private _enabled: boolean;\n    private _shown: boolean;\n\n    private padding = 0;\n\n    constructor({\n        view,\n        hoverView,\n        pressedView,\n        disabledView,\n        textView,\n        padding,\n        textOffset,\n    }: ButtonOptions)\n    {\n        super();\n\n        if (padding)\n        {\n            this.padding = padding * 2;\n        }\n\n        this.defaultView = view;\n        this.defaultView.zIndex = 1;\n        this.addChild(this.defaultView);\n\n        if (hoverView)\n        {\n            this.hoverView = hoverView;\n            this.hoverView.zIndex = 2;\n            this.addChild(this.hoverView);\n            this.hoverView.visible = false;\n        }\n\n        if (pressedView)\n        {\n            this.pressedView = pressedView;\n            this.pressedView.zIndex = 3;\n            this.addChild(this.pressedView);\n            this.pressedView.visible = false;\n        }\n\n        if (disabledView)\n        {\n            this.disabledView = disabledView;\n            this.disabledView.zIndex = 4;\n            this.addChild(this.disabledView);\n            this.disabledView.visible = false;\n        }\n\n        if (textView)\n        {\n            this.text = textView;\n            this.text.zIndex = 4;\n            textView.anchor.set(0.5);\n\n            textView.x = (this.width / 2) + (textOffset?.x ?? 0);\n            textView.y = (this.height / 2) + (textOffset?.y ?? 0);\n\n            this.addChild(this.text);\n\n            if (textView.width + this.padding > this.defaultView?.width)\n            {\n                const maxWidth = this.defaultView?.width;\n\n                textView.scale.set(maxWidth / (textView.width + this.padding));\n            }\n        }\n\n        this._enabled = true;\n\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this._isDown = true;\n            this.onDown.emit(this, e);\n        });\n\n        this.on('pointerup', (e: FederatedPointerEvent) =>\n        {\n            this._processUp(e);\n        });\n\n        this.on('pointerupoutside', (e: FederatedPointerEvent) =>\n        {\n            this._processUpOut(e);\n        });\n\n        this.on('pointertap', (e: FederatedPointerEvent) =>\n        {\n            this._isDown = false;\n            this.onPress.emit(this, e);\n        });\n\n        this.on('pointerover', (e: FederatedPointerEvent) =>\n        {\n            this.onHover.emit(this, e);\n        });\n\n        this.on('pointerout', (e: FederatedPointerEvent) =>\n        {\n            this._processOut(e);\n        });\n\n        this.onDown.connect((_btn, e) =>\n        {\n            this.down(e);\n            if (this.pressedView)\n            {\n                this.pressedView.visible = true;\n            }\n        });\n\n        this.onUp.connect((_btn, e) =>\n        {\n            this.up(e);\n            if (this.pressedView)\n            {\n                this.pressedView.visible = false;\n            }\n        });\n\n        this.onUpOut.connect((_bth, e) =>\n        {\n            this._upOut(e);\n            if (this.pressedView)\n            {\n                this.pressedView.visible = false;\n            }\n        });\n\n        if (!utils.isMobile.any)\n        {\n            this.onHover.connect((_bth, e) =>\n            {\n                if (this.hoverView)\n                {\n                    this.hoverView.visible = true;\n                }\n                this.hover(e);\n            });\n        }\n\n        this.onOut.connect((_bth, e) =>\n        {\n            if (this.hoverView)\n            {\n                this.hoverView.visible = false;\n            }\n            this._out(e);\n        });\n\n        this._isDown = false;\n\n        this.enabled = true;\n    }\n\n    /**\n     * TODO\n     * @param _e\n     */\n    public down(_e?: FederatedPointerEvent): void\n    {\n        // override me!\n    }\n\n    /**\n     * TODO\n     * @param _e\n     */\n    public up(_e?: FederatedPointerEvent): void\n    {\n        // override me!\n    }\n\n    /**\n     * TODO\n     * @param _e\n     */\n    public hover(_e?: FederatedPointerEvent): void\n    {\n        // override me!\n    }\n\n    /** TODO */\n    public getText(): string\n    {\n        return this.text.text;\n    }\n\n    /** TODO */\n    get isDown(): boolean\n    {\n        return this._isDown;\n    }\n\n    /** TODO */\n    set enabled(value: boolean)\n    {\n        this._enabled = value;\n        this.interactive = value;\n        this.cursor = value ? 'pointer' : 'default';\n\n        if (this.disabledView)\n        {\n            this.disabledView.visible = !value;\n        }\n\n        if (!value)\n        {\n            this._processUp();\n        }\n    }\n\n    /** TODO */\n    get enabled(): boolean\n    {\n        return this._enabled;\n    }\n\n    /** TODO */\n    set shown(value: boolean)\n    {\n        this._shown = value;\n        this.enabled = value;\n        if (this.defaultView)\n        {\n            this.defaultView.visible = value;\n        }\n    }\n\n    /** TODO */\n    get shown(): boolean\n    {\n        return this._shown;\n    }\n\n    private _processUp(e?: FederatedPointerEvent): void\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n        }\n        this._isDown = false;\n    }\n\n    private _processUpOut(e?: FederatedPointerEvent): void\n    {\n        if (this._isDown)\n        {\n            this.onUpOut.emit(this, e);\n        }\n\n        if (this.pressedView)\n        {\n            this.pressedView.visible = false;\n        }\n        this._isDown = false;\n    }\n\n    private _processOut(e?: FederatedPointerEvent): void\n    {\n        this.onOut.emit(this, e);\n        this._isDown = false;\n    }\n\n    private _upOut(e?: FederatedPointerEvent): void\n    {\n        this.up(e);\n    }\n\n    private _out(e?: FederatedPointerEvent): void\n    {\n        this.up(e);\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { Button } from './Button';\n\n/**\n * Container based component that switches visibility of containers by click.\n *\n * Can be used for creating tabs, radio buttons, checkboxes etc.\n * @example\n * ```\n * const switch = new Switch([\n *     new PixiSprite(Texture.from(`switch_off.png`)),\n *     new PixiSprite(Texture.from(`switch_on.png`)),\n * ]);\n *\n * ```\n */\nexport class Switch extends Container\n{\n    /** TODO */\n    public view = new Container();\n    /** TODO */\n    public views: Container[] = [];\n    /** TODO */\n    public activeViewID = 0;\n    /** TODO */\n    public onChange: Signal<(state: number) => void>;\n    private button: Button;\n\n    constructor(views: Container[], activeViewID = 0)\n    {\n        super();\n\n        views.forEach((state, id) =>\n        {\n            this.view.addChild(state);\n\n            state.visible = id === this.activeViewID;\n        });\n\n        this.views = views;\n        this.activeViewID = activeViewID;\n\n        this.button = new Button({ view: this.view });\n\n        this.addChild(this.button);\n\n        this.onChange = new Signal();\n\n        this.button.onPress.connect(() =>\n        {\n            this.switch();\n            this.onChange.emit(this.activeViewID);\n        });\n    }\n\n    /** TODO */\n    public get activeView(): Container\n    {\n        return this.views[this.activeViewID];\n    }\n\n    /**\n     * TODO\n     * @param id\n     */\n    public switch(id?: number): void\n    {\n        this.activeView.visible = false;\n        this.activeViewID = id === undefined ? this.activeViewID + 1 : id;\n\n        if (this.activeViewID > this.views.length - 1)\n        {\n            this.activeViewID = 0;\n        }\n\n        const newState = this.views[this.activeViewID];\n\n        newState.visible = true;\n    }\n}\n","import { Texture, Rectangle } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle, Text, ITextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Switch } from './Switch';\n\nexport type CheckBoxStyle = {\n    checked: Container | string;\n    unchecked: Container | string;\n    text?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type CheckBoxOptions = {\n    style: CheckBoxStyle;\n    text: string;\n    checked?: boolean;\n};\n\n/**\n * Creates a container based checkbox element\n * @example\n * ```\n *  new CheckBox({\n *     checked: false,\n *     style: {\n *         unchecked: new PixiSprite(Texture.from(`switch_off.png`)),\n *         checked: new PixiSprite(Texture.from(`switch_on.png`)),\n *     }\n * });\n *\n * ```\n */\nexport class CheckBox extends Switch\n{\n    private label: Text;\n\n    constructor(options: CheckBoxOptions)\n    {\n        const unchecked = typeof options.style.unchecked === 'string'\n            ? new Sprite(Texture.from(options.style.unchecked))\n            : options.style.unchecked;\n\n        const checked = typeof options.style.checked === 'string'\n            ? new Sprite(Texture.from(options.style.checked))\n            : options.style.checked;\n\n        super([unchecked, checked], options.checked ? 1 : 0);\n\n        if (options.text)\n        {\n            this.label = new Text(options.text, options.style.text);\n            this.label.x = unchecked.width + 10;\n            this.label.y = (unchecked.height - this.label.height) / 2;\n            unchecked.addChild(this.label);\n\n            this.label = new Text(options.text, options.style.text);\n            this.label.x = checked.width + 10;\n            this.label.y = (checked.height - this.label.height) / 2;\n            checked.addChild(this.label);\n        }\n\n        this.update();\n\n        this.onChange = new Signal();\n    }\n\n    /** TODO */\n    public update()\n    {\n        this.hitArea = new Rectangle(0, 0, this.width, this.height);\n    }\n\n    /** TODO */\n    public set text(text: string)\n    {\n        this.label.text = text;\n        this.update();\n    }\n\n    /** TODO */\n    public get text(): string\n    {\n        return this.label.text;\n    }\n\n    /** TODO */\n    public get checked(): boolean\n    {\n        return this.activeViewID === 1;\n    }\n\n    /** TODO */\n    public set checked(checked: boolean)\n    {\n        this.switch(checked ? 1 : 0);\n        this.update();\n    }\n}\n","import { Rectangle } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\nexport function removeHitBox(...obj: DisplayObject[])\n{\n    obj.forEach((o) => o && (o.hitArea = new Rectangle()));\n}\n","import { Point, Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { removeHitBox } from './utils/helpers/hitbox';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type DoubleSliderOptions = {\n    bg: Container | string;\n    slider1: Container | string;\n    slider2: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value1?: number;\n    value2?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/**\n * Creates a slider with range selection option\n * @example\n * ```\n * const width = 250;\n * const height = 50;\n *\n * const bg = new Graphics()\n *     .beginFill(0x000000).drawRoundedRect(0, 0, width, height, height/2)\n *     .beginFill(0x808080).drawRoundedRect(5, 5, width-10, height-10, height/2);\n *\n * const fill = new Graphics()\n *     .beginFill(0xFFFFFF).drawRoundedRect(0, 0, width-10, height-10, (height-10)/2);\n *\n * const slider1 = new Graphics()\n *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n *     .beginFill(0x000000).drawCircle(0, 0, 20);\n *\n * const slider2 = new Graphics()\n *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n *     .beginFill(0x000000).drawCircle(0, 0, 20);\n *\n * const slider = new DoubleSlider({\n *     bg,\n *     fill,\n *     slider1,\n *     slider2,\n *     min: 0,\n *     max: 100,\n *     value1: 10,\n *     value2: 90,\n *     valueTextStyle: {\n *         fill: 0xDCDCDC,\n *         fontSize: 14\n *     }\n * });\n *\n * slider.onChange.connect((value1, value2) =>{\n *     console.log(`New slider range ${value1} - ${value2}`);\n * });\n * ```\n */\n\n// TODO: implement vertical slider\n// TODO: make this fill to be draggable and move border values at the same time\nexport class DoubleSlider extends Container\n{\n    protected readonly bg: Container;\n    protected readonly fill?: Container;\n    protected readonly fillMask?: Graphics;\n\n    private readonly slider1: Container;\n    private readonly slider2: Container;\n\n    private readonly slider1Text?: Text;\n    private readonly slider2Text?: Text;\n\n    private dragging1 = 0;\n    private dragging2 = 0;\n\n    /** TODO */\n    public percent1 = 0;\n    /** TODO */\n    public percent2 = 100;\n    /** TODO */\n    public value1 = 0;\n    /** TODO */\n    public value2 = 0;\n\n    /** TODO */\n    public onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    private readonly options: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super();\n\n        this.options = options;\n        const bg = typeof options.bg === 'string' ? new Sprite(Texture.from(options.bg)) : options.bg;\n\n        this.bg = new Container();\n        this.bg.addChild(bg);\n        this.addChild(this.bg);\n\n        if (options.fill)\n        {\n            const fill = typeof options.fill === 'string' ? new Sprite(Texture.from(options.fill)) : options.fill;\n\n            this.fill = new Container();\n            this.fill.addChild(fill);\n\n            const offsetX = options.fillOffset?.x ?? 0;\n            const offsetY = options.fillOffset?.y ?? 0;\n\n            this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n            this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n            this.fillMask = new Graphics();\n            this.fill.addChild(this.fillMask);\n            this.fill.mask = this.fillMask;\n\n            this.addChild(this.fill);\n        }\n\n        const slider1 = typeof options.slider1 === 'string' ? new Sprite(Texture.from(options.slider1)) : options.slider1;\n\n        if (slider1 instanceof Sprite)\n        {\n            slider1.anchor.set(0.5);\n        }\n\n        slider1.x = slider1.width / 2;\n\n        this.slider1 = new Container();\n        this.slider1.addChild(slider1);\n        this.slider1.y = this.bg.height / 2;\n        const slider2 = typeof options.slider2 === 'string' ? new Sprite(Texture.from(options.slider2)) : options.slider2;\n\n        if (slider2 instanceof Sprite)\n        {\n            slider2.anchor.set(0.5);\n        }\n\n        slider2.x = slider2.width / 2;\n\n        this.slider2 = new Container();\n        this.slider2.addChild(slider2);\n        this.slider2.y = this.bg.height / 2;\n\n        this.addChild(this.slider2, this.slider1);\n\n        if (options.showValue)\n        {\n            this.slider1Text = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.slider1Text.anchor.set(0.5);\n            this.addChild(this.slider1Text);\n        }\n\n        if (options.showValue)\n        {\n            this.slider2Text = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.slider2Text.anchor.set(0.5);\n            this.addChild(this.slider2Text);\n        }\n\n        this.validateSettings();\n\n        this.makeScrollable();\n\n        this.update();\n    }\n\n    private validateSettings()\n    {\n        const { options } = this;\n\n        if (!options.min)\n        {\n            options.min = 0;\n        }\n\n        if (!options.max)\n        {\n            options.max = 100;\n        }\n\n        if (options.value1 < options.min)\n        {\n            options.value1 = options.min;\n        }\n\n        if (options.value2 > options.max)\n        {\n            options.value2 = options.max;\n        }\n\n        this.value1 = options.value1 ?? options.min ?? 0;\n        this.percent1 = (this.value1 * 100) / options.max;\n\n        this.value2 = options.value2 ?? options.min ?? 0;\n        this.percent2 = (this.value2 * 100) / options.max;\n\n        const scale = options.max - options.min;\n\n        const scaledVal1 = this.value1 - options.min;\n        const scaledVal2 = this.value2 - options.min;\n\n        this.percent1 = (scaledVal1 * 100) / scale;\n        this.percent2 = (scaledVal2 * 100) / scale;\n    }\n\n    private makeScrollable()\n    {\n        this.interactive = true;\n        this.slider1.interactive = true;\n        this.slider2.interactive = true;\n        this.bg.interactive = true;\n\n        const { onDragStart1, onDragMove1, onDragEnd1, onSetByClick, onDragStart2, onDragMove2, onDragEnd2 } = this;\n\n        this.slider1\n            .on('pointerdown', onDragStart1, this)\n            .on('pointermove', onDragMove1, this)\n            .on('pointerup', onDragEnd1, this)\n            .on('pointerupoutside', onDragEnd1, this);\n\n        this.slider2\n            .on('pointerdown', onDragStart2, this)\n            .on('pointermove', onDragMove2, this)\n            .on('pointerup', onDragEnd2, this)\n            .on('pointerupoutside', onDragEnd2, this);\n\n        this.bg.on('pointerdown', onSetByClick, this);\n        this.on('pointerupoutside', onDragEnd1, this);\n\n        removeHitBox(this.fill, this.slider1Text, this.slider2Text);\n    }\n\n    private onSetByClick(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        let pos = obj.parent.worldTransform.applyInverse(event.global).x - (this.slider2.width / 2);\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        const maxPos = this.bg.width - this.slider2.width;\n\n        if (pos > maxPos)\n        {\n            pos = maxPos;\n        }\n\n        if (pos < this.slider1.x)\n        {\n            this.setSlider1Val(pos);\n        }\n        else if (pos > this.slider2.x)\n        {\n            this.setSlider2Val(pos);\n        }\n        else\n        {\n            const distToSlider1 = pos - this.slider1.x;\n            const distToSlider2 = this.slider2.x - pos;\n\n            if (distToSlider1 < distToSlider2)\n            {\n                this.setSlider1Val(pos);\n            }\n            else\n            {\n                this.setSlider2Val(pos);\n            }\n        }\n\n        this.update();\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private onDragStart1(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event;\n        this.dragging1 = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove1(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging1)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging1 === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging1 = 2;\n            }\n        }\n\n        if (this.dragging1 === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < 0)\n            {\n                pos = 0;\n            }\n\n            if (pos > this.slider2.x)\n            {\n                pos = this.slider2.x;\n            }\n\n            const maxPos = this.bg.width - this.slider1.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.setSlider1Val(pos);\n\n            this.update();\n        }\n    }\n\n    private setSlider1Val(pos: number)\n    {\n        const maxPos = this.bg.width - this.slider1.width;\n\n        this.percent1 = Math.round((pos / maxPos) * 100);\n        this.value1 = this.options.min + Math.round(((this.options.max - this.options.min) / 100) * this.percent1);\n    }\n\n    private onDragEnd1()\n    {\n        if (!this.dragging1)\n        {\n            return;\n        }\n\n        this.dragging1 = 0;\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private onDragStart2(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event.data;\n        this.dragging2 = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove2(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging2)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging2 === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging2 = 2;\n            }\n        }\n\n        if (this.dragging2 === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < this.slider1.x)\n            {\n                pos = this.slider1.x;\n            }\n\n            const maxPos = this.bg.width - this.slider2.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.setSlider2Val(pos);\n\n            this.update();\n        }\n    }\n\n    private setSlider2Val(pos: number)\n    {\n        const maxPos = this.bg.width - this.slider2.width;\n\n        this.percent2 = Math.round((pos / maxPos) * 100);\n        this.value2 = this.options.min + Math.round(((this.options.max - this.options.min) / 100) * this.percent2);\n    }\n\n    private onDragEnd2()\n    {\n        if (!this.dragging2)\n        {\n            return;\n        }\n\n        this.dragging2 = 0;\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private update()\n    {\n        const position1 = ((this.bg.width - this.slider1.width) / 100) * this.percent1;\n        const position2 = ((this.bg.width - this.slider2.width) / 100) * this.percent2;\n\n        this.slider1.x = position1;\n        this.slider2.x = position2;\n\n        const startPoint = (this.bg.width / 100) * this.percent1;\n        const endPoint = (this.bg.width / 100) * this.percent2;\n\n        if (this.fillMask)\n        {\n            this.fillMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRect(\n                    startPoint,\n                    0,\n                    endPoint - startPoint,\n                    this.fill.height,\n                );\n        }\n\n        if (this.options.showValue)\n        {\n            this.slider1Text.text = this.value1;\n            this.slider2Text.text = this.value2;\n\n            const slider1PosX = this.slider1.x + (this.slider1.width / 2);\n            const slider1PosY = this.slider1.y;\n\n            this.slider1Text.x = slider1PosX + (this.options.valueTextOffset?.x ?? 0);\n            this.slider1Text.y = slider1PosY + (this.options.valueTextOffset?.y ?? 0);\n\n            const slider2PosX = this.slider2.x + (this.slider2.width / 2);\n            const slider2PosY = this.slider2.y;\n\n            this.slider2Text.x = slider2PosX + (this.options.valueTextOffset?.x ?? 0);\n            this.slider2Text.y = slider2PosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n}\n","import { Texture, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\n\nexport type InputOptions = {\n    bg?: Container | string;\n    textStyle?: Partial<TextStyle>;\n    placeholder?: string;\n    value?: string;\n    maxLength?: number;\n    align?: 'left' | 'center' | 'right';\n    padding?: number;\n};\n\n/**\n * Container based component that creates an input element, so we can read users input text.\n * @example\n * ```\n * new Input({\n *     bg: new PixiSprite(Texture.from('item.png')),\n *     padding,\n *     textStyle: {\n *         ...buttonTextStyle,\n *         fill: textColor,\n *         fontSize,\n *     },\n *     maxLength,\n *     align,\n *     placeholder,\n *     value: text,\n * });\n * ```\n */\n\n// TODO: make this editable (read keys and move cursor, detect mouse click position)\nexport class Input extends Container\n{\n    private readonly bg: Container;\n    private readonly inputField: Text;\n    private readonly inputMask: Graphics;\n    private readonly placeholder: Text;\n    private _cursor: Sprite;\n    private editing = false;\n    private tick = 0;\n\n    /** TODO */\n    public readonly onEnter: Signal<(text: string) => void>;\n    /** TODO */\n    public readonly onChange: Signal<(text: string) => void>;\n\n    private activation = false;\n    private readonly options: InputOptions;\n\n    // TODO: make cursor blink\n    constructor(options: InputOptions)\n    {\n        super();\n\n        this.options = options;\n        this.bg = typeof options.bg === 'string' ? new Sprite(Texture.from(options.bg)) : options.bg;\n        this.bg.cursor = 'text';\n        this.bg.interactive = true;\n\n        const defaultTextStyle = {\n            fill: 0x000000,\n            align: 'center',\n        } as TextStyle;\n\n        const textStyle = new TextStyle(options.textStyle ?? defaultTextStyle);\n\n        this.inputField = new Text('', textStyle);\n\n        this.inputMask = new Graphics()\n            .beginFill(0xffffff)\n            .drawRect(\n                this.padding,\n                this.padding,\n                this.bg.width - (this.padding * 2),\n                this.bg.height - (this.padding * 2),\n            );\n\n        this._cursor = new Sprite(Texture.WHITE);\n        this._cursor.tint = Number(options.textStyle.fill) || 0x000000;\n        this._cursor.anchor.set(0.5);\n        this._cursor.width = 2;\n        this._cursor.height = this.inputField.height * 0.8;\n        this._cursor.alpha = 0;\n\n        this.inputField.mask = this.inputMask;\n        this._cursor.mask = this.inputMask;\n\n        this.placeholder = new Text(\n            options.placeholder,\n            textStyle ?? defaultTextStyle,\n        );\n        this.placeholder.visible = !!options.placeholder;\n\n        this.value = options.value ?? '';\n\n        this.addChild(\n            this.bg,\n            this.inputField,\n            this.placeholder,\n            this._cursor,\n            this.inputMask,\n        );\n\n        this.align();\n\n        this.cursor = 'text';\n        this.interactive = true;\n\n        this.on('pointertap', () => (this.activation = true));\n\n        if (utils.isMobile.any)\n        {\n            window.addEventListener('touchstart', () => this.handleActivation());\n\n            let keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            if (!keyboard)\n            {\n                keyboard = document.createElement('input');\n\n                document.body.appendChild(keyboard);\n                keyboard.setAttribute('id', 'v-keyboard');\n\n                keyboard.style.opacity = '0';\n            }\n\n            keyboard.oninput = () =>\n            {\n                let value = keyboard.value;\n\n                const maxLength = this.options.maxLength;\n\n                if (maxLength && value.length > this.options.maxLength)\n                {\n                    value = value.substring(0, maxLength);\n                    keyboard.value = value;\n                }\n\n                this.value = value;\n\n                this.onChange.emit(this.value);\n            };\n        }\n        else\n        {\n            window.addEventListener('click', () =>\n            {\n                this.handleActivation();\n                this.onEnter.emit(this.value);\n            });\n\n            window.addEventListener('keydown', (e) =>\n            {\n                const key = e.key;\n\n                if (key === 'Backspace')\n                {\n                    this._delete();\n                }\n                else if (key === 'Escape' || key === 'Enter')\n                {\n                    this.stopEditing();\n                    this.onEnter.emit(this.value);\n                }\n                else if (key.length === 1) this._add(key);\n            });\n        }\n\n        this.onEnter = new Signal();\n        this.onChange = new Signal();\n    }\n\n    private _add(key: string): void\n    {\n        if (!this.editing)\n        {\n            return;\n        }\n\n        if (this.options.maxLength && this.value.length >= this.options.maxLength)\n        {\n            return;\n        }\n\n        this.value = this.value + key;\n\n        this.onChange.emit(this.value);\n    }\n\n    private _delete(): void\n    {\n        if (!this.editing || this.value.length === 0) return;\n        const array = this.value.split('');\n\n        array.pop();\n        this.value = array.join('');\n\n        this.onChange.emit(this.value);\n    }\n\n    private _startEditing(): void\n    {\n        this.tick = 0;\n        this.editing = true;\n        this.placeholder.visible = false;\n        this._cursor.alpha = 1;\n\n        if (utils.isMobile.any)\n        {\n            const keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            keyboard.focus();\n            keyboard.click();\n            keyboard.value = this.value;\n        }\n\n        this.align();\n    }\n\n    private handleActivation()\n    {\n        this.stopEditing();\n\n        if (this.activation)\n        {\n            this._startEditing();\n\n            this.activation = false;\n        }\n    }\n\n    /** TODO */\n    public stopEditing(): void\n    {\n        this._cursor.alpha = 0;\n        this.editing = false;\n\n        if (this.inputField.text === '')\n        {\n            this.placeholder.visible = true;\n        }\n\n        if (this.value.length === 0) this.placeholder.visible = true;\n        if (utils.isMobile.any) document.getElementById('v-keyboard')?.blur();\n\n        this.align();\n    }\n\n    /**\n     * TODO\n     * @param dt\n     */\n    public update(dt: number): void\n    {\n        if (!this.editing) return;\n        this.tick += dt * 0.1;\n        this._cursor.alpha = Math.round((Math.sin(this.tick) * 0.5) + 0.5);\n    }\n\n    private align()\n    {\n        const align = this.getAlign();\n\n        this.inputField.anchor.set(align, 0.5);\n        this.inputField.x = (this.bg.width * align) + (align === 1 ? -this.padding : this.padding);\n        this.inputField.y = this.bg.height / 2;\n\n        this.placeholder.anchor.set(align, 0.5);\n        this.placeholder.x = (this.bg.width * align) + (align === 1 ? -this.padding : this.padding);\n        this.placeholder.y = this.bg.height / 2;\n\n        this._cursor.x = this.getCursorPosX();\n        this._cursor.y = this.inputField.y;\n    }\n\n    private get padding(): number\n    {\n        return this.options.padding | 0;\n    }\n\n    private getAlign(): 0 | 1 | 0.5\n    {\n        const maxWidth = this.bg.width * 0.95;\n        const isOverflowed = this.inputField.width + (this.padding * 3) > maxWidth;\n\n        if (isOverflowed)\n        {\n            return this.editing ? 1 : 0;\n        }\n        switch (this.options.align)\n        {\n            case 'left':\n                return 0;\n            case 'center':\n                return 0.5;\n            case 'right':\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    private getCursorPosX()\n    {\n        const align = this.getAlign();\n\n        switch (align)\n        {\n            case 0:\n                return this.inputField.x + this.inputField.width;\n            case 0.5:\n                return this.inputField.x + (this.inputField.width * 0.5);\n            case 1:\n                return this.inputField.x;\n            default:\n                return 0;\n        }\n    }\n\n    /** TODO */\n    set value(text: string)\n    {\n        this.inputField.text = text;\n\n        if (text.length !== 0)\n        {\n            this.placeholder.visible = false;\n        }\n        else\n        {\n            this.placeholder.visible = !this.editing;\n        }\n\n        this.align();\n    }\n\n    /** TODO */\n    get value(): string\n    {\n        return this.inputField.text;\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport type LayoutType = 'horizontal' | 'vertical';\n\nexport type LayoutOptions = {\n    elementsMargin?: number;\n    children?: Container[];\n    vertPadding?: number;\n    horPadding?: number;\n};\n\n// TODO: replace this with pixi-layout component\n/**\n * Container based element for arranging pixi containers inside it basing on their sizes\n * @example\n * ```\n * const layout = new Layout({\n *    type: 'horizontal',\n *    elementsMargin: 10,\n *    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 100, 100),\n *    ],\n * });\n *\n * layout.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n * ```\n */\nexport class Layout extends Container\n{\n    /** TODO */\n    public view: Container;\n    /** TODO */\n    public type: LayoutType;\n\n    /** TODO */\n    public w: number;\n    /** TODO */\n    public h: number;\n\n    /** TODO */\n    public override readonly children: Container[] = [];\n\n    private readonly options?: { type?: LayoutType } & LayoutOptions;\n\n    constructor(options?: { type?: LayoutType } & LayoutOptions)\n    {\n        super();\n\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.map((child) => this.addChild(child));\n        }\n    }\n\n    protected override onChildrenChange()\n    {\n        let x = this.options?.horPadding ?? 0;\n        let y = this.options?.vertPadding ?? 0;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n\n        this.children.forEach((child) =>\n        {\n            if (!this.type && x + child.width >= this.parent.width)\n            {\n                y += elementsMargin + child.height;\n                x = this.options?.horPadding ?? 0;\n\n                child.x = x;\n                child.y = y;\n\n                this.h = y;\n            }\n            else\n            {\n                child.x = x;\n                child.y = y;\n            }\n\n            switch (this.type)\n            {\n                case 'horizontal':\n                    x += elementsMargin + child.width;\n                    this.w = x;\n                    this.h = child.height;\n                    break;\n\n                case 'vertical':\n                    y += elementsMargin + child.height;\n                    this.h = y;\n                    this.w = child.width;\n                    break;\n\n                default:\n                    x += elementsMargin + child.width;\n                    this.w = x;\n                    break;\n            }\n        });\n    }\n}\n\n/**\n * Helper to generate horizontal Layout for arranging pixi containers horizontally basing on their sizes\n * @param elementsMargin\n * @param {...any} params\n * @example\n * ```\n * row(15, // margins between elements\n *     logo, // pregenerated Layout\n *     menu, // pregenerated Layout\n *     loginForm // pregenerated Layout\n * );\n * ```\n */\nexport function row(elementsMargin: number, ...params: Container[]): Layout\n{\n    const children: Container[] = [];\n\n    params.forEach((param) => children.push(param));\n\n    return new Layout({\n        type: 'horizontal',\n        elementsMargin,\n        children,\n    });\n}\n\n/**\n * Helper to generate vertical Layout for arranging pixi containers vertically basing on their sizes\n * @param elementsMargin\n * @param {...any} params\n * @example\n * ```\n * col(15, // margins between elements\n *     logo, // pregenerated Layout\n *     menu, // pregenerated Layout\n *     loginForm // pregenerated Layout\n * );\n * ```\n */\nexport function col(elementsMargin: number, ...params: Container[]): Layout\n{\n    const children: Container[] = [];\n\n    params.forEach((param) => children.push(param));\n\n    return new Layout({\n        type: 'vertical',\n        elementsMargin,\n        children,\n    });\n}\n","import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\n\nexport type MaskedFrameOptions = {\n    target: string | Container;\n    mask: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Applies mask to a container and draws a same shape border around it\n * @example\n * ```\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`),\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n * ```\n */\nexport class MaskedFrame extends Container\n{\n    // private readonly borderMask: Graphics;\n    private border?: Graphics;\n    /** TODO */\n    public target: Container;\n    /** TODO */\n    public targetMask: Container;\n\n    constructor({\n        target,\n        mask,\n        borderWidth,\n        borderColor,\n    }: MaskedFrameOptions)\n    {\n        super();\n\n        this.target = typeof target === 'string' ? new Sprite(Texture.from(target)) : target;\n        this.targetMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask;\n        this.target.addChild(this.targetMask);\n        this.target.mask = this.targetMask;\n\n        if (borderWidth)\n        {\n            this.border = new Graphics()\n                .beginFill(borderColor)\n                .drawRect(\n                    0,\n                    0,\n                    this.target.width + (borderWidth * 2),\n                    this.target.height + (borderWidth * 2),\n                );\n\n            this.target.x = borderWidth;\n            this.target.y = borderWidth;\n\n            const borderMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask.clone();\n\n            borderMask.width += borderWidth * 2;\n            borderMask.height += borderWidth * 2;\n\n            this.border.mask = borderMask;\n            this.border.addChild(borderMask);\n            this.addChild(this.border);\n        }\n\n        this.addChild(this.target);\n    }\n\n    /** TODO */\n    public showBorder()\n    {\n        if (!this.border) return;\n\n        this.border.visible = true;\n    }\n\n    /** TODO */\n    public hideBorder()\n    {\n        if (!this.border) return;\n\n        this.border.visible = false;\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { Layout, LayoutType } from './Layout';\n\nexport type GraphicsType = {\n    color: number;\n    fillColor?: number;\n    width?: number;\n    height?: number;\n    radius?: number;\n    padding?: number;\n};\n\nexport type RadioBoxStyle = {\n    bg: string | GraphicsType;\n    checked: string | GraphicsType;\n    textStyle?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type RadioBoxOptions = {\n    items: string[];\n    type: LayoutType;\n    elementsMargin: number;\n    style: RadioBoxStyle;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container based group of checkbox elements that can be used as radio buttons\n * @example\n * ```\n * new RadioGroup({\n *     selectedItem: 0,\n *     items: ['Option 1', 'Option 2', 'Option 3'],\n *     type: 'vertical',\n *     elementsMargin: 10,\n *     style: {\n *         bg: 'radio.png',\n *         checked: 'radio_checked.png',\n *         textStyle: {\n *             fontSize: 22,\n *             fill: 0xFFFFFF,\n *         }\n *     },\n * });\n *\n * ```\n */\nexport class RadioGroup extends Container\n{\n    private items: CheckBox[] = [];\n\n    /** TODO */\n    public value: string;\n    /** TODO */\n    public selected: number;\n\n    /** TODO */\n    public onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n    /** TODO */\n    public view: Layout;\n\n    private readonly options: RadioBoxOptions;\n\n    constructor(options: RadioBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.value = options.items[options.selectedItem];\n\n        this.selected = options.selectedItem;\n\n        this.view = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n        });\n\n        options.items.forEach((item, id) =>\n        {\n            const unchecked = typeof options.style.bg === 'string'\n                ? new Sprite(Texture.from(options.style.bg))\n                : this.getGraphics(options.style.bg);\n\n            const checked = typeof options.style.checked === 'string'\n                ? new Sprite(Texture.from(options.style.checked))\n                : this.getGraphics(options.style.checked);\n\n            const checkBox = new CheckBox({\n                text: item,\n                checked: options.selectedItem === id,\n                style: {\n                    unchecked,\n                    checked,\n                    text: options.style.textStyle,\n                },\n            });\n\n            this.view.addChild(checkBox);\n\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.view.addChild(checkBox);\n        });\n\n        this.onChange = new Signal();\n    }\n\n    private getGraphics({\n        color,\n        fillColor,\n        width,\n        height,\n        radius,\n        padding,\n    }: GraphicsType)\n    {\n        const graphics = new Graphics().beginFill(color);\n\n        const isCircle = width === height && radius >= width / 2;\n\n        isCircle\n            ? graphics.drawCircle(width / 2, width / 2, width / 2)\n            : graphics.drawRoundedRect(0, 0, width, height, radius);\n\n        if (fillColor !== undefined)\n        {\n            graphics.beginFill(fillColor);\n\n            const center = width / 2;\n\n            if (isCircle)\n            {\n                graphics.drawCircle(center, center, center - padding);\n            }\n            else\n            {\n                graphics.drawRoundedRect(\n                    padding,\n                    padding,\n                    width - (padding * 2),\n                    height - (padding * 2),\n                    radius,\n                );\n            }\n        }\n\n        return graphics;\n    }\n\n    /**\n     * TODO\n     * @param id\n     */\n    public selectItem(id: number)\n    {\n        this.selected = id;\n\n        this.items.map((item) => (item.checked = false));\n\n        this.items[id].checked = true;\n\n        this.value = this.options.items[this.selected];\n        this.onChange.emit(this.selected, this.value);\n    }\n}\n","export interface SpringOptions\n{\n    max?: number;\n    damp?: number;\n    springiness?: number;\n}\n\nexport class Spring\n{\n    public x: number;\n    public ax: number;\n    public dx: number;\n    public tx: number;\n\n    private _options: SpringOptions;\n\n    constructor(options: SpringOptions = {})\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n\n        // add opts to object for shared opts.\n        this._options = options;\n        this._options.max = options.max || 160;\n        this._options.damp = options.damp || 0.8;\n        this._options.springiness = options.springiness || 0.1;\n    }\n\n    update(): void\n    {\n        this.ax = (this.tx - this.x) * this._options.springiness;\n\n        this.dx += this.ax;\n        this.dx *= this._options.damp;\n\n        if (this.dx < -this._options.max) this.dx = -this._options.max;\n        else if (this.dx > this._options.max) this.dx = this._options.max;\n\n        this.x += this.dx;\n    }\n\n    reset(): void\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n    }\n\n    get max(): number\n    {\n        return this._options.max;\n    }\n\n    set max(value: number)\n    {\n        this._options.max = value;\n    }\n\n    get damp(): number\n    {\n        return this._options.damp;\n    }\n\n    set damp(value: number)\n    {\n        this._options.damp = value;\n    }\n\n    get springiness(): number\n    {\n        return this._options.springiness;\n    }\n\n    set springiness(value: number)\n    {\n        this._options.springiness = value;\n    }\n}\n","import { Spring } from './Spring';\n\nexport default class ScrollSpring\n{\n    public done: boolean;\n    public to: number;\n\n    private _spring: Spring;\n    private _pos: number;\n    private _speed: number;\n    private _correctSpeed: boolean;\n\n    constructor()\n    {\n        this._spring = new Spring();\n        this._pos = 0;\n        this.to = 0;\n    }\n\n    start(speed: number, pos: number, to: number): void\n    {\n        this._speed = speed;\n        this._pos = pos;\n        this.to = to;\n        this.done = false;\n\n        this._spring.x = this._pos;\n        this._spring.tx = this.to;\n\n        const diff = this.to - this._pos;\n        const toDirection = Math.abs(diff) / diff;\n        const currentDirection = Math.abs(this._speed) / this._speed;\n\n        if (toDirection !== currentDirection)\n        {\n            this._correctSpeed = true;\n        }\n\n        else\n        {\n            this._correctSpeed = false;\n        }\n    }\n\n    update(): number\n    {\n        if (this._correctSpeed)\n        {\n            this._speed *= 0.6;\n\n            if (Math.abs(this._speed) < 2)\n            {\n                this._correctSpeed = false;\n            }\n\n            this._pos += this._speed;\n\n            this._spring.x = this._pos;\n        }\n\n        else\n        {\n            const diff = this.to - this._pos;\n\n            if (Math.abs(diff) < 0.05)\n            {\n                this._pos = this.to;\n                this.done = true;\n            }\n\n            else\n            {\n                this._spring.tx = this.to;\n                this._spring.update();\n                this._pos = this._spring.x;\n            }\n        }\n\n        return this._pos;\n    }\n\n    cancel(): void\n    {\n        // matches jux interface\n    }\n}\n","import ScrollSpring from './ScrollSpring';\n\nexport interface SlidingNumberOptions\n{\n    constrain?: boolean\n    maxSpeed?: number;\n    ease?: ConstrainEase\n}\n\nexport interface ConstrainEase\n{\n    done: boolean;\n    to: number;\n    start(speed: number, pos: number, to: number): void;\n    update(): number;\n}\n\nexport class SlidingNumber\n{\n    public position = 0;\n    public constrain = true;\n    public min = 0; // the window width of the drag\n    public max = 0; // the window width of the drag\n    public maxSpeed = 400;\n\n    private _ease: ConstrainEase;\n\n    private _offset = 0;\n    private _prev = 0;\n    private _speed = 0;\n    private _hasStopped: boolean;\n\n    private _targetSpeed = 0;\n    private _speedChecker = 0;\n    private _grab = 0;\n    private _activeEase: ConstrainEase;\n\n    constructor(options: SlidingNumberOptions = {})\n    {\n        this.constrain = options.constrain ?? true;\n        this.maxSpeed = options.maxSpeed ?? 400;\n        this._ease = options.ease ?? new ScrollSpring();\n    }\n\n    set value(n: number)\n    {\n        this._speed = 0;\n        this.position = n;\n    }\n\n    get value(): number\n    {\n        return this.position;\n    }\n\n    public grab(offset: number): void\n    {\n        this._grab = offset;\n        this._offset = this.position - offset;\n        this._speedChecker = 0;\n        this._targetSpeed = this._speed = 0;\n        this._hasStopped = false;\n    }\n\n    public hold(newPosition: number): void\n    {\n        this._speedChecker++;\n\n        this.position = newPosition + this._offset;\n\n        if (this._speedChecker > 1)\n        {\n            this._targetSpeed = this.position - this._prev;\n        }\n\n        this._speed += (this._targetSpeed - this._speed) / 2;\n\n        if (this._speed > this.maxSpeed) this._speed = this.maxSpeed;\n        else if (this._speed < -this.maxSpeed) this._speed = -this.maxSpeed;\n\n        this._prev = this.position;\n\n        if (this.constrain)\n        {\n            this._activeEase = null;\n\n            if (this.position > this.min)\n            {\n                this.position -= (this.position - this.min) / 1.5;\n            }\n            else if (this.position < this.max)\n            {\n                this.position += (this.max - this.position) / 1.5;\n            }\n        }\n    }\n\n    public slide(): void\n    {\n        if (this._hasStopped) return;\n\n        if (this.constrain)\n        {\n            this._updateConstrain();\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n\n    get moveAmount(): number\n    {\n        return -(this.position - this._offset - this._grab);\n    }\n\n    private _updateDefault(): void\n    {\n        this._speed *= 0.9;\n        this.position += this._speed;\n\n        if ((this._speed < 0 ? this._speed * -1 : this._speed) < 0.01)\n        {\n            this._hasStopped = true;\n        }\n    }\n\n    private _updateConstrain(): void\n    {\n        const max: number = this.max;\n\n        if (this.position > this.min || this.position < max || this._activeEase)\n        {\n            if (!this._activeEase)\n            {\n                this._activeEase = this._ease;\n\n                if (this.position > this.min)\n                {\n                    this._activeEase.start(this._speed, this.position, this.min);\n                }\n                else\n                {\n                    this._activeEase.start(this._speed, this.position, max);\n                }\n            }\n\n            this.position = this._activeEase.update();\n\n            if (this._activeEase.done)\n            {\n                this.position = this._activeEase.to;\n                this._speed = 0;\n                this._activeEase = null;\n            }\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n}\n","import { Point, Rectangle } from '@pixi/core';\nimport { ConstrainEase, SlidingNumber } from './SlidingNumber';\n\ninterface TrackpadOptions\n{\n    /** override the easing function when constraining */\n    xEase?: ConstrainEase;\n    yEase?: ConstrainEase;\n\n    maxSpeed?: number\n    constrain?: boolean\n}\n\n/** A track pad class that lets you scroll both in al directions. Its up to you to hook up the events. */\nexport class Trackpad\n{\n    public xAxis: SlidingNumber;\n    public yAxis: SlidingNumber;\n\n    private _isDown: boolean;\n    private _globalPosition: Point;\n    private _frame: Rectangle;\n    private _bounds: Rectangle;\n    private _dirty: boolean;\n\n    constructor(options: TrackpadOptions)\n    {\n        this.xAxis = new SlidingNumber({\n            ease: options.xEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain,\n        });\n\n        this.yAxis = new SlidingNumber({\n            ease: options.yEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain,\n        });\n\n        this._frame = new Rectangle();\n\n        this._bounds = new Rectangle();\n        this._globalPosition = new Point();\n    }\n\n    public pointerDown(pos: Point): void\n    {\n        this.xAxis.grab(pos.x);\n        this.yAxis.grab(pos.y);\n        this._isDown = true;\n    }\n\n    public pointerUp(): void\n    {\n        this._isDown = false;\n    }\n\n    public pointerMove(pos: Point): void\n    {\n        this._globalPosition = pos;\n    }\n\n    public update(): void\n    {\n        if (this._dirty)\n        {\n            this._dirty = false;\n\n            this.xAxis.min = this._bounds.left;\n            this.xAxis.min = this._bounds.right - this._frame.width;\n\n            this.xAxis.min = this._bounds.top;\n            this.xAxis.min = this._bounds.bottom - this._frame.height;\n        }\n\n        if (this._isDown)\n        {\n            this.xAxis.hold(this._globalPosition.x);\n            this.yAxis.hold(this._globalPosition.y);\n        }\n        else\n        {\n            this.xAxis.slide();\n            this.yAxis.slide();\n        }\n    }\n\n    public resize(w: number, h: number): void\n    {\n        this._frame.x = 0;\n        this._frame.width = w;\n\n        this._frame.y = 0;\n        this._frame.height = h;\n\n        this._dirty = true;\n    }\n\n    public setBounds(minX: number, maxX: number, minY: number, maxY: number): void\n    {\n        this._bounds.x = minX;\n        this._bounds.width = maxX - minX;\n        this._bounds.y = minY;\n        this._bounds.height = maxY - minY;\n\n        this._dirty = true;\n    }\n\n    get x(): number\n    {\n        return this.xAxis.value;\n    }\n\n    get y(): number\n    {\n        return this.yAxis.value;\n    }\n}\n","import { Texture, Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport type { LayoutType } from './Layout';\nimport { Layout } from './Layout';\nimport { removeHitBox } from './utils/helpers/hitbox';\nimport ScrollSpring from './utils/trackpad/ScrollSpring';\nimport { Trackpad } from './utils/trackpad/Trackpad';\n\nexport type ScrollBoxOptions = {\n    type?: LayoutType;\n    background?: number | string;\n    width?: number;\n    height?: number;\n    radius?: number;\n    elementsMargin?: number;\n    items?: Container[];\n    disableDynamicRendering?: boolean;\n    vertPadding?: number;\n    horPadding?: number;\n    padding?: number;\n};\n\n/**\n * Can be used for arranging a lists of pixi container based elements and make them scrollable.\n * @example\n * ```\n * new ScrollBox({\n *     background: 0XFFFFFF,\n *     type: 'vertical',\n *     elementsMargin: 10,\n *     width: 200,\n *     height: 300,\n *     radius: 10,\n *     padding: 10,\n *     items: [\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *     ],\n * });\n * ```\n */\n\nexport class ScrollBox extends Container\n{\n    private background: Graphics | Sprite;\n    private borderMask: Graphics;\n    private lastWidth: number;\n    private lastHeight: number;\n    private __width = 0;\n    private __height = 0;\n\n    private readonly onMouseScrollBinded: (event: any) => void;\n\n    private readonly layout: Layout;\n\n    private readonly freeSlot = {\n        x: 0,\n        y: 0,\n    };\n\n    private _trackpad: Trackpad;\n    private isDragging = 0;\n    private childrenInteractiveStorage: boolean[] = [];\n    private ticker = Ticker.shared;\n    private readonly options: ScrollBoxOptions;\n\n    constructor(options: ScrollBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.addBackground();\n\n        this.__width = options.width | this.background.width;\n        this.__height = options.height | this.background.height;\n\n        if (!options.vertPadding)\n        {\n            options.vertPadding = options.padding ?? 0;\n        }\n\n        if (!options.horPadding)\n        {\n            options.horPadding = options.padding ?? 0;\n        }\n\n        this.layout = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n            vertPadding: options.vertPadding,\n            horPadding: options.horPadding,\n        });\n\n        super.addChild(this.layout);\n\n        if (options.items?.length)\n        {\n            options.items.forEach((item) =>\n            {\n                this.addItem(item);\n            });\n        }\n\n        if (this.hasBounds)\n        {\n            this.addMask();\n            this.makeScrollable();\n        }\n\n        this.onMouseScrollBinded = this.onMouseScroll.bind(this);\n\n        const spring = new ScrollSpring();\n\n        this._trackpad = new Trackpad({\n            constrain: true,\n            yEase: spring,\n        });\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.resize();\n\n        this.ticker.add(this.update, this);\n    }\n\n    private get hasBounds(): boolean\n    {\n        return !!this.__width || !!this.__height;\n    }\n\n    protected override onChildrenChange()\n    {\n        // do nothing we manage this in addItem\n    }\n\n    /**\n     * TODO\n     * @param {...any} items\n     */\n    public addItem<T extends Container[]>(...items: T): T[0]\n    {\n        if (items.length > 1)\n        {\n            items.forEach((item) => this.addItem(item));\n        }\n        else\n        {\n            const child = items[0];\n\n            if (!child.width || !child.height)\n            {\n                console.error('ScrollBox item should have size');\n            }\n\n            child.x = this.freeSlot.x;\n            child.y = this.freeSlot.y;\n\n            this.layout.addChild(child);\n\n            if (!this.options.disableDynamicRendering)\n            {\n                child.renderable = this.isItemVisible(child);\n            }\n\n            const elementsMargin = this.options?.elementsMargin ?? 0;\n\n            switch (this.options.type)\n            {\n                case 'horizontal':\n                    this.freeSlot.x += elementsMargin + child.width;\n                    break;\n\n                default:\n                    this.freeSlot.y += elementsMargin + child.height;\n                    break;\n            }\n        }\n\n        this.resize();\n\n        return items[0];\n    }\n\n    /**\n     * TODO\n     * @param itemID\n     */\n    public removeItem(itemID: number)\n    {\n        const child = this.layout.children[itemID];\n\n        if (!child)\n        {\n            return;\n        }\n\n        this.layout.removeChild(child);\n\n        this.resize();\n    }\n\n    /**\n     * TODO\n     * @param item\n     */\n    public isItemVisible(item: Container): boolean\n    {\n        const isVertical = this.options.type === 'vertical' || !this.options.type;\n        let isVisible = false;\n        const layout = this.layout;\n\n        if (isVertical)\n        {\n            const posY = item.y + layout.y;\n\n            if (\n                posY + item.height + this.options.vertPadding >= 0\n                && posY - this.options.vertPadding - this.options.elementsMargin <= this.options.height\n            )\n            {\n                isVisible = true;\n            }\n        }\n        else\n        {\n            const posX = item.x + layout.x;\n\n            if (posX + item.width >= 0 && posX <= this.options.width)\n            {\n                isVisible = true;\n            }\n        }\n\n        return isVisible;\n    }\n\n    /** TODO */\n    public get items(): Container[] | []\n    {\n        return this.layout?.children ?? [];\n    }\n\n    private addBackground()\n    {\n        this.background = typeof this.options.background === 'string'\n            ? new Sprite(Texture.from(this.options.background))\n            : new Graphics();\n\n        this.addChild(this.background);\n\n        this.resize();\n    }\n\n    private addMask()\n    {\n        this.borderMask = new Graphics();\n        super.addChild(this.borderMask);\n        this.mask = this.borderMask;\n        this.resize();\n    }\n\n    private makeScrollable()\n    {\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this.isDragging = 1;\n            this._trackpad.pointerDown(e.global);\n        });\n\n        this.on('pointerup', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreChildrenInteractivity();\n        });\n\n        this.on('pointerupoutside', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreChildrenInteractivity();\n        });\n\n        this.on('pointermove', (e: FederatedPointerEvent) =>\n        {\n            this._trackpad.pointerMove(e.global);\n\n            if (this.isDragging)\n            {\n                this.disableChildrenInteractivity();\n            }\n        });\n\n        const { onMouseHover, onMouseOut } = this;\n\n        this.on('mouseover', onMouseHover, this).on('mouseout', onMouseOut, this);\n    }\n\n    private disableChildrenInteractivity()\n    {\n        // prevent clicks on buttons\n        this.items.forEach((item, itemID) =>\n        {\n            if (!this.childrenInteractiveStorage[itemID])\n            {\n                this.childrenInteractiveStorage[itemID]\n                    = item.interactive === true;\n            }\n\n            item.interactive = false;\n        });\n    }\n\n    private restoreChildrenInteractivity()\n    {\n        // prevent clicks on buttons\n        this.items.forEach((item, itemID) =>\n        {\n            const wasItemInteractive\n                = this.childrenInteractiveStorage[itemID] === true;\n\n            if (wasItemInteractive)\n            {\n                item.interactive = wasItemInteractive;\n\n                delete this.childrenInteractiveStorage[itemID];\n            }\n        });\n    }\n\n    private setInteractive(interactive: boolean)\n    {\n        this.interactive = interactive;\n    }\n\n    private get layoutHeight(): number\n    {\n        return this.layout.height + (this.options.vertPadding * 2);\n    }\n\n    private get layoutWidth(): number\n    {\n        return this.layout.width + (this.options.horPadding * 2);\n    }\n\n    /** TODO */\n    public resize(): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.borderMask\n            && (this.lastWidth !== this.layoutWidth\n                || this.lastHeight !== this.layoutHeight)\n        )\n        {\n            const verPadding = this.options.vertPadding;\n            const horPadding = this.options.horPadding;\n\n            if (!this.options.width)\n            {\n                this.__width += this.layoutWidth;\n            }\n\n            if (!this.options.height)\n            {\n                this.__height += this.layoutHeight;\n            }\n\n            this.borderMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRoundedRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                );\n            removeHitBox(this.borderMask);\n\n            if (\n                this.background instanceof Graphics\n                && typeof this.options.background === 'number'\n            )\n            {\n                this.background\n                    .clear()\n                    .lineStyle(0)\n                    .beginFill(this.options.background)\n                    .drawRect(\n                        0,\n                        0,\n                        this.__width + horPadding,\n                        this.__height + verPadding,\n                    );\n            }\n\n            if (this.options.type === 'horizontal')\n            {\n                this.setInteractive(this.layoutWidth > this.__width);\n            }\n            else\n            {\n                this.setInteractive(this.layoutHeight > this.__height);\n            }\n\n            this.lastWidth = this.layoutWidth;\n            this.lastHeight = this.layoutHeight;\n        }\n\n        if (this._trackpad)\n        {\n            const maxWidth\n                = this.borderMask.width\n                - this.layout.width\n                - (this.options.horPadding * 2);\n\n            const maxHeight\n                = this.borderMask.height\n                - this.layout.height\n                - (this.options.vertPadding * 2);\n\n            if (this.options.type === 'vertical')\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n            }\n            else if (this.options.type === 'horizontal')\n            {\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n            else\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    private onMouseHover()\n    {\n        this.renderAllItems();\n\n        document.addEventListener('mousewheel', this.onMouseScrollBinded);\n        document.addEventListener('DOMMouseScroll', this.onMouseScrollBinded);\n    }\n\n    private onMouseOut()\n    {\n        this.stopRenderHiddenItems();\n\n        document.removeEventListener('mousewheel', this.onMouseScrollBinded);\n        document.removeEventListener(\n            'DOMMouseScroll',\n            this.onMouseScrollBinded,\n        );\n    }\n\n    private onMouseScroll(event: any): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.options.type === 'horizontal'\n            && (typeof event.deltaX !== 'undefined'\n                || typeof event.deltaY !== 'undefined')\n        )\n        {\n            const targetPos = event.deltaY\n                ? this.layout.x - event.deltaY\n                : this.layout.x - event.deltaX;\n\n            if (\n                targetPos < 0\n                && targetPos + this.layoutWidth + this.options.horPadding\n                    < this.__width\n            )\n            {\n                this._trackpad.xAxis.value = this.__width - this.layoutWidth;\n            }\n            else if (targetPos > this.options.horPadding)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.xAxis.value = targetPos;\n            }\n        }\n        else if (typeof event.deltaY !== 'undefined')\n        {\n            const targetPos = this.layout.y - event.deltaY;\n\n            if (\n                targetPos < 0\n                && targetPos + this.layoutHeight + this.options.vertPadding\n                    < this.__height\n            )\n            {\n                this._trackpad.yAxis.value = this.__height - this.layoutHeight;\n            }\n            else if (targetPos > this.options.vertPadding)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.yAxis.value = targetPos;\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** TODO */\n    public scrollBottom()\n    {\n        if (!this.interactive)\n        {\n            this.scrollTop();\n        }\n        else\n        {\n            this.scrollTo(this.layout.children.length - 1);\n        }\n    }\n\n    /** TODO */\n    public scrollTop()\n    {\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n    }\n\n    /** TODO */\n    public renderAllItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = true;\n        });\n    }\n\n    /** TODO */\n    public stopRenderHiddenItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = this.isItemVisible(child);\n        });\n    }\n\n    /**\n     * TODO\n     * @param elementID\n     */\n    public scrollTo(elementID: number)\n    {\n        if (!this.interactive)\n        {\n            return;\n        }\n\n        const target = this.layout.children[elementID];\n\n        if (!target)\n        {\n            return;\n        }\n\n        this._trackpad.xAxis.value\n            = this.options.type === 'horizontal'\n                ? this.__width\n                  - target.x\n                  - target.width\n                  - this.options.horPadding\n                : 0;\n\n        this._trackpad.yAxis.value\n            = !this.options.type || this.options.type === 'vertical'\n                ? this.__height\n                  - target.y\n                  - target.height\n                  - this.options.vertPadding\n                : 0;\n    }\n\n    /** TODO */\n    public override get height(): number\n    {\n        return this.__height;\n    }\n\n    /** TODO */\n    public override get width(): number\n    {\n        return this.__width;\n    }\n\n    /** TODO */\n    public update()\n    {\n        this._trackpad.update();\n\n        if (this.options.type === 'horizontal')\n        {\n            if (this.layout.x !== this._trackpad.x)\n            {\n                this.renderAllItems();\n                this.layout.x = this._trackpad.x;\n            }\n            else\n            {\n                this.stopRenderHiddenItems();\n            }\n        }\n        else\n        if (this.layout.y !== this._trackpad.y)\n        {\n            this.renderAllItems();\n            this.layout.y = this._trackpad.y;\n        }\n        else\n        {\n            this.stopRenderHiddenItems();\n        }\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Button } from './Button';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG?: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container based component that gives us a selection dropdown.\n * It is a composition of a [[Button]] and a [[ScrollBox]].\n *\n * !!! Important\n * In order scroll to work, you have to call update() method in your game loop.\n * @example\n * ```\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *         textStyle: { fill: 0xffffff, fontSize: 20 },,\n *         radius: 25,\n *     },\n *     selectedTextOffset: {\n *         y: -13,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *         offset: {\n *             y: -16,\n *             x: 24,\n *         },\n *     },\n * });\n *\n * ```\n */\nexport class Select extends Container\n{\n    private readonly closedBG: Container;\n    private readonly openBG: Container;\n    /** TODO */\n    public selectedText: Text;\n    /** TODO */\n    public value: number;\n    /** TODO */\n    public onSelect: Signal<(value: number, text: string) => void>;\n\n    private scrollBox: ScrollBox;\n\n    constructor({\n        closedBG,\n        textStyle,\n        items,\n        openBG,\n        selected,\n        selectedTextOffset,\n        scrollBox,\n    }: SelectOptions)\n    {\n        super();\n\n        this.closedBG = typeof closedBG === 'string' ? new Sprite(Texture.from(closedBG)) : closedBG;\n        this.openBG = typeof openBG === 'string' ? new Sprite(Texture.from(openBG)) : openBG;\n        this.openBG.visible = false;\n\n        this.addChild(this.closedBG, this.openBG);\n\n        const openButton = new Button({\n            view: this.closedBG,\n        });\n\n        this.addChild(openButton);\n\n        openButton.onPress.connect(() => this.toggle());\n\n        this.selectedText = new Text(\n            items?.items ? items.items[0] : '',\n            textStyle,\n        );\n\n        const selectedTextButton = new Button({\n            view: this.selectedText,\n        });\n\n        selectedTextButton.onPress.connect(() => this.toggle());\n\n        this.addChild(selectedTextButton);\n\n        this.selectedText.anchor.set(0.5);\n        this.selectedText.x = (this.closedBG.width / 2) + (selectedTextOffset?.x || 0);\n        this.selectedText.y = (this.closedBG.height / 2) + (selectedTextOffset?.y || 0);\n\n        this.scrollBox = new ScrollBox({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.closedBG.width,\n            height: this.closedBG.height * 5,\n            radius: 0,\n            padding: 0,\n            ...scrollBox,\n        });\n\n        this.openBG.addChild(this.scrollBox);\n\n        this.scrollBox.y = this.closedBG.height;\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x += scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.onSelect = new Signal();\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.getText();\n\n            if (id === selected)\n            {\n                this.selectedText.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.selectedText.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** TODO */\n    public toggle()\n    {\n        this.openBG.visible = !this.openBG.visible;\n        this.closedBG.visible = !this.closedBG.visible;\n    }\n\n    /** TODO */\n    public open()\n    {\n        this.openBG.visible = true;\n        this.closedBG.visible = false;\n    }\n\n    /** TODO */\n    public close()\n    {\n        this.openBG.visible = false;\n        this.closedBG.visible = true;\n    }\n\n    private convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius,\n    }: SelectItemsOptions): Button[]\n    {\n        const buttons: Button[] = [];\n\n        items.forEach((item) =>\n        {\n            const view = new Graphics()\n                .beginFill(backgroundColor)\n                .drawRoundedRect(0, 0, width, height, radius);\n            const hoverView = new Graphics()\n                .beginFill(hoverColor ?? backgroundColor)\n                .drawRoundedRect(0, 0, width, height, radius);\n            const textView = new Text(item, textStyle);\n\n            const button = new Button({ view, hoverView, textView });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n\n    /** TODO */\n    public update()\n    {\n        this.scrollBox.update();\n    }\n}\n","import { Point, Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { removeHitBox } from './utils/helpers/hitbox';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type SliderOptions = {\n    bg: Container | string;\n    slider: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n// TODO: implement vertical slider\n/**\n * Creates a slider\n * @example\n * ```\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n *     valueTextStyle: {\n *         fill: 0xffffff,\n *         fontSize: 22,\n *     },\n *     showValue: true,\n *     valueTextOffset: {\n *         y: -40,\n *     },\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     onChange(`Slider changed > ${value}`);\n * });\n * ```\n */\nexport class Slider extends Container\n{\n    protected readonly bg: Container;\n    protected readonly fill?: Container;\n    protected readonly fillMask?: Graphics;\n    protected readonly slider: Container;\n    protected readonly valueText?: Text;\n\n    private dragging = 0;\n    protected readonly options: SliderOptions;\n\n    /** TODO */\n    public percent = 100;\n    /** TODO */\n    public value = 0;\n    /** TODO */\n    public onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super();\n\n        this.options = options;\n        const bg = typeof options.bg === 'string' ? new Sprite(Texture.from(options.bg)) : options.bg;\n\n        this.bg = new Container();\n        this.bg.addChild(bg);\n\n        this.addChild(this.bg);\n\n        if (options.fill)\n        {\n            const fill = typeof options.fill === 'string' ? new Sprite(Texture.from(options.fill)) : options.fill;\n\n            this.fill = new Container();\n            this.fill.addChild(fill);\n\n            const offsetX = options.fillOffset?.x ?? 0;\n            const offsetY = options.fillOffset?.y ?? 0;\n\n            this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n            this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n            this.fillMask = new Graphics();\n            this.fill.addChild(this.fillMask);\n            this.fill.mask = this.fillMask;\n\n            this.addChild(this.fill);\n        }\n\n        const slider = typeof options.slider === 'string' ? new Sprite(Texture.from(options.slider)) : options.slider;\n\n        slider.x = slider.width / 2;\n\n        this.slider = new Container();\n        this.slider.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        this.slider.y = this.bg.height / 2;\n\n        this.addChild(this.slider);\n\n        if (options.showValue)\n        {\n            this.valueText = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.valueText.anchor.set(0.5);\n            this.addChild(this.valueText);\n        }\n\n        this.makeScrollable();\n        this.validateSettings();\n        this.update();\n    }\n\n    protected validateSettings()\n    {\n        const { options } = this;\n\n        if (!options.min)\n        {\n            options.min = 0;\n        }\n\n        if (!options.max)\n        {\n            options.max = 100;\n        }\n\n        if (options.value < options.min)\n        {\n            options.value = options.min;\n        }\n\n        if (options.value > options.max)\n        {\n            options.value = options.max;\n        }\n\n        this.value = options.value ?? options.min ?? 0;\n        this.percent = (this.value * 100) / options.max;\n\n        const scale = options.max - options.min;\n        const scaledVal = this.value - options.min;\n\n        this.percent = (scaledVal * 100) / scale;\n    }\n\n    protected makeScrollable()\n    {\n        this.interactive = true;\n        this.slider.interactive = true;\n        this.bg.interactive = true;\n\n        const { onSetByClick, onDragStart, onDragMove, onDragEnd } = this;\n\n        this.slider\n            .on('pointerdown', onDragStart, this)\n            .on('pointermove', onDragMove, this)\n            .on('pointerup', onDragEnd, this)\n            .on('pointerupoutside', onDragEnd, this);\n        this.bg.on('pointerdown', onSetByClick, this);\n        this.on('pointerupoutside', onDragEnd, this);\n\n        removeHitBox(this.fill, this.valueText);\n    }\n\n    protected onSetByClick(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n        let pos = obj.parent.worldTransform.applyInverse(event.global).x - (this.slider.width / 2);\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        const maxPos = this.bg.width - this.slider.width;\n\n        if (pos > maxPos)\n        {\n            pos = maxPos;\n        }\n\n        this.percent = Math.round((pos / maxPos) * 100);\n        this.value = this.options.min + Math.round(\n            ((this.options.max - this.options.min) / 100) * this.percent,\n        );\n\n        this.update();\n\n        this.onChange?.emit(this.value);\n    }\n\n    private onDragStart(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event;\n        this.dragging = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging = 2;\n            }\n        }\n\n        if (this.dragging === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < 0)\n            {\n                pos = 0;\n            }\n\n            const maxPos = this.bg.width - this.slider.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.percent = Math.round((pos / maxPos) * 100);\n            this.value = this.options.min + Math.round(\n                ((this.options.max - this.options.min) / 100) * this.percent,\n            );\n\n            this.update();\n        }\n    }\n\n    private onDragEnd()\n    {\n        if (!this.dragging)\n        {\n            return;\n        }\n\n        this.dragging = 0;\n\n        this.onChange?.emit(this.value);\n    }\n\n    protected update(pos?: number)\n    {\n        const position = pos ?? ((this.bg.width - this.slider.width) / 100) * this.percent;\n\n        this.slider.x = position;\n\n        const startPoint = 0;\n        const endPoint = (this.bg.width / 100) * this.percent;\n\n        if (this.fillMask)\n        {\n            this.fillMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRect(\n                    startPoint,\n                    0,\n                    endPoint - startPoint,\n                    this.fill.height,\n                );\n        }\n\n        if (this.options.showValue)\n        {\n            this.valueText.text = this.value;\n\n            const sliderPosX = this.slider.x + (this.slider.width / 2);\n            const sliderPosY = this.slider.y;\n\n            this.valueText.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.valueText.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onChange?.emit(this.value);\n    }\n}\n"],"names":["Button","Container","view","hoverView","pressedView","disabledView","textView","padding","textOffset","_a","_b","_c","_d","maxWidth","Signal","e","_btn","_bth","utils","_e","value","Switch","views","activeViewID","state","id","newState","CheckBox","options","unchecked","Sprite","Texture","checked","Text","Rectangle","text","removeHitBox","obj","o","DoubleSlider","bg","fill","offsetX","offsetY","Graphics","slider1","slider2","scale","scaledVal1","scaledVal2","onDragStart1","onDragMove1","onDragEnd1","onSetByClick","onDragStart2","onDragMove2","onDragEnd2","event","pos","maxPos","distToSlider1","distToSlider2","Point","data","dragPointerEnd","_f","_g","_h","_i","position1","position2","startPoint","endPoint","slider1PosX","slider1PosY","slider2PosX","slider2PosY","Input","defaultTextStyle","textStyle","TextStyle","keyboard","maxLength","key","array","dt","align","Layout","child","x","y","elementsMargin","row","params","children","param","col","MaskedFrame","target","mask","borderWidth","borderColor","borderMask","RadioGroup","item","checkBox","color","fillColor","width","height","radius","graphics","isCircle","center","Spring","ScrollSpring","speed","to","diff","toDirection","currentDirection","SlidingNumber","n","offset","newPosition","max","Trackpad","w","h","minX","maxX","minY","maxY","ScrollBox","Ticker","spring","items","itemID","isVertical","isVisible","layout","posY","posX","onMouseHover","onMouseOut","wasItemInteractive","interactive","verPadding","horPadding","maxHeight","targetPos","elementID","Select","closedBG","openBG","selected","selectedTextOffset","scrollBox","openButton","selectedTextButton","__spreadValues","button","backgroundColor","hoverColor","buttons","Slider","slider","scaledVal","onDragStart","onDragMove","onDragEnd","position","sliderPosX","sliderPosY"],"mappings":"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"}