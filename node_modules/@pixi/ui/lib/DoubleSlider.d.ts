import { Container } from '@pixi/display';
import { Graphics } from '@pixi/graphics';
import { ITextStyle, TextStyle } from '@pixi/text';
import { Signal } from 'typed-signals';
export type DoubleSliderOptions = {
    bg: Container | string;
    slider1: Container | string;
    slider2: Container | string;
    fill?: Container | string;
    min?: number;
    max?: number;
    value1?: number;
    value2?: number;
    valueTextStyle?: TextStyle | Partial<ITextStyle>;
    showValue?: boolean;
    valueTextOffset?: {
        x?: number;
        y?: number;
    };
    fillOffset?: {
        x?: number;
        y?: number;
    };
};
/**
 * Creates a slider with range selection option
 * @example
 * ```
 * const width = 250;
 * const height = 50;
 *
 * const bg = new Graphics()
 *     .beginFill(0x000000).drawRoundedRect(0, 0, width, height, height/2)
 *     .beginFill(0x808080).drawRoundedRect(5, 5, width-10, height-10, height/2);
 *
 * const fill = new Graphics()
 *     .beginFill(0xFFFFFF).drawRoundedRect(0, 0, width-10, height-10, (height-10)/2);
 *
 * const slider1 = new Graphics()
 *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)
 *     .beginFill(0x000000).drawCircle(0, 0, 20);
 *
 * const slider2 = new Graphics()
 *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)
 *     .beginFill(0x000000).drawCircle(0, 0, 20);
 *
 * const slider = new DoubleSlider({
 *     bg,
 *     fill,
 *     slider1,
 *     slider2,
 *     min: 0,
 *     max: 100,
 *     value1: 10,
 *     value2: 90,
 *     valueTextStyle: {
 *         fill: 0xDCDCDC,
 *         fontSize: 14
 *     }
 * });
 *
 * slider.onChange.connect((value1, value2) =>{
 *     console.log(`New slider range ${value1} - ${value2}`);
 * });
 * ```
 */
export declare class DoubleSlider extends Container {
    protected readonly bg: Container;
    protected readonly fill?: Container;
    protected readonly fillMask?: Graphics;
    private readonly slider1;
    private readonly slider2;
    private readonly slider1Text?;
    private readonly slider2Text?;
    private dragging1;
    private dragging2;
    /** TODO */
    percent1: number;
    /** TODO */
    percent2: number;
    /** TODO */
    value1: number;
    /** TODO */
    value2: number;
    /** TODO */
    onChange: Signal<(value1: number, value2: number) => void>;
    private readonly options;
    constructor(options: DoubleSliderOptions);
    private validateSettings;
    private makeScrollable;
    private onSetByClick;
    private onDragStart1;
    private onDragMove1;
    private setSlider1Val;
    private onDragEnd1;
    private onDragStart2;
    private onDragMove2;
    private setSlider2Val;
    private onDragEnd2;
    private update;
}
//# sourceMappingURL=DoubleSlider.d.ts.map