{"version":3,"file":"RadioGroup.mjs","sources":["../src/RadioGroup.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { Layout, LayoutType } from './Layout';\n\nexport type GraphicsType = {\n    color: number;\n    fillColor?: number;\n    width?: number;\n    height?: number;\n    radius?: number;\n    padding?: number;\n};\n\nexport type RadioBoxStyle = {\n    bg: string | GraphicsType;\n    checked: string | GraphicsType;\n    textStyle?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type RadioBoxOptions = {\n    items: string[];\n    type: LayoutType;\n    elementsMargin: number;\n    style: RadioBoxStyle;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container based group of checkbox elements that can be used as radio buttons\n * @example\n * ```\n * new RadioGroup({\n *     selectedItem: 0,\n *     items: ['Option 1', 'Option 2', 'Option 3'],\n *     type: 'vertical',\n *     elementsMargin: 10,\n *     style: {\n *         bg: 'radio.png',\n *         checked: 'radio_checked.png',\n *         textStyle: {\n *             fontSize: 22,\n *             fill: 0xFFFFFF,\n *         }\n *     },\n * });\n *\n * ```\n */\nexport class RadioGroup extends Container\n{\n    private items: CheckBox[] = [];\n\n    /** TODO */\n    public value: string;\n    /** TODO */\n    public selected: number;\n\n    /** TODO */\n    public onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n    /** TODO */\n    public view: Layout;\n\n    private readonly options: RadioBoxOptions;\n\n    constructor(options: RadioBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.value = options.items[options.selectedItem];\n\n        this.selected = options.selectedItem;\n\n        this.view = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n        });\n\n        options.items.forEach((item, id) =>\n        {\n            const unchecked = typeof options.style.bg === 'string'\n                ? new Sprite(Texture.from(options.style.bg))\n                : this.getGraphics(options.style.bg);\n\n            const checked = typeof options.style.checked === 'string'\n                ? new Sprite(Texture.from(options.style.checked))\n                : this.getGraphics(options.style.checked);\n\n            const checkBox = new CheckBox({\n                text: item,\n                checked: options.selectedItem === id,\n                style: {\n                    unchecked,\n                    checked,\n                    text: options.style.textStyle,\n                },\n            });\n\n            this.view.addChild(checkBox);\n\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.view.addChild(checkBox);\n        });\n\n        this.onChange = new Signal();\n    }\n\n    private getGraphics({\n        color,\n        fillColor,\n        width,\n        height,\n        radius,\n        padding,\n    }: GraphicsType)\n    {\n        const graphics = new Graphics().beginFill(color);\n\n        const isCircle = width === height && radius >= width / 2;\n\n        isCircle\n            ? graphics.drawCircle(width / 2, width / 2, width / 2)\n            : graphics.drawRoundedRect(0, 0, width, height, radius);\n\n        if (fillColor !== undefined)\n        {\n            graphics.beginFill(fillColor);\n\n            const center = width / 2;\n\n            if (isCircle)\n            {\n                graphics.drawCircle(center, center, center - padding);\n            }\n            else\n            {\n                graphics.drawRoundedRect(\n                    padding,\n                    padding,\n                    width - (padding * 2),\n                    height - (padding * 2),\n                    radius,\n                );\n            }\n        }\n\n        return graphics;\n    }\n\n    /**\n     * TODO\n     * @param id\n     */\n    public selectItem(id: number)\n    {\n        this.selected = id;\n\n        this.items.map((item) => (item.checked = false));\n\n        this.items[id].checked = true;\n\n        this.value = this.options.items[this.selected];\n        this.onChange.emit(this.selected, this.value);\n    }\n}\n"],"names":[],"mappings":"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"}