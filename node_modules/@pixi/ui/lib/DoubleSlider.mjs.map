{"version":3,"file":"DoubleSlider.mjs","sources":["../src/DoubleSlider.ts"],"sourcesContent":["import { Point, Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { removeHitBox } from './utils/helpers/hitbox';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type DoubleSliderOptions = {\n    bg: Container | string;\n    slider1: Container | string;\n    slider2: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value1?: number;\n    value2?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/**\n * Creates a slider with range selection option\n * @example\n * ```\n * const width = 250;\n * const height = 50;\n *\n * const bg = new Graphics()\n *     .beginFill(0x000000).drawRoundedRect(0, 0, width, height, height/2)\n *     .beginFill(0x808080).drawRoundedRect(5, 5, width-10, height-10, height/2);\n *\n * const fill = new Graphics()\n *     .beginFill(0xFFFFFF).drawRoundedRect(0, 0, width-10, height-10, (height-10)/2);\n *\n * const slider1 = new Graphics()\n *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n *     .beginFill(0x000000).drawCircle(0, 0, 20);\n *\n * const slider2 = new Graphics()\n *     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n *     .beginFill(0x000000).drawCircle(0, 0, 20);\n *\n * const slider = new DoubleSlider({\n *     bg,\n *     fill,\n *     slider1,\n *     slider2,\n *     min: 0,\n *     max: 100,\n *     value1: 10,\n *     value2: 90,\n *     valueTextStyle: {\n *         fill: 0xDCDCDC,\n *         fontSize: 14\n *     }\n * });\n *\n * slider.onChange.connect((value1, value2) =>{\n *     console.log(`New slider range ${value1} - ${value2}`);\n * });\n * ```\n */\n\n// TODO: implement vertical slider\n// TODO: make this fill to be draggable and move border values at the same time\nexport class DoubleSlider extends Container\n{\n    protected readonly bg: Container;\n    protected readonly fill?: Container;\n    protected readonly fillMask?: Graphics;\n\n    private readonly slider1: Container;\n    private readonly slider2: Container;\n\n    private readonly slider1Text?: Text;\n    private readonly slider2Text?: Text;\n\n    private dragging1 = 0;\n    private dragging2 = 0;\n\n    /** TODO */\n    public percent1 = 0;\n    /** TODO */\n    public percent2 = 100;\n    /** TODO */\n    public value1 = 0;\n    /** TODO */\n    public value2 = 0;\n\n    /** TODO */\n    public onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    private readonly options: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super();\n\n        this.options = options;\n        const bg = typeof options.bg === 'string' ? new Sprite(Texture.from(options.bg)) : options.bg;\n\n        this.bg = new Container();\n        this.bg.addChild(bg);\n        this.addChild(this.bg);\n\n        if (options.fill)\n        {\n            const fill = typeof options.fill === 'string' ? new Sprite(Texture.from(options.fill)) : options.fill;\n\n            this.fill = new Container();\n            this.fill.addChild(fill);\n\n            const offsetX = options.fillOffset?.x ?? 0;\n            const offsetY = options.fillOffset?.y ?? 0;\n\n            this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n            this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n            this.fillMask = new Graphics();\n            this.fill.addChild(this.fillMask);\n            this.fill.mask = this.fillMask;\n\n            this.addChild(this.fill);\n        }\n\n        const slider1 = typeof options.slider1 === 'string' ? new Sprite(Texture.from(options.slider1)) : options.slider1;\n\n        if (slider1 instanceof Sprite)\n        {\n            slider1.anchor.set(0.5);\n        }\n\n        slider1.x = slider1.width / 2;\n\n        this.slider1 = new Container();\n        this.slider1.addChild(slider1);\n        this.slider1.y = this.bg.height / 2;\n        const slider2 = typeof options.slider2 === 'string' ? new Sprite(Texture.from(options.slider2)) : options.slider2;\n\n        if (slider2 instanceof Sprite)\n        {\n            slider2.anchor.set(0.5);\n        }\n\n        slider2.x = slider2.width / 2;\n\n        this.slider2 = new Container();\n        this.slider2.addChild(slider2);\n        this.slider2.y = this.bg.height / 2;\n\n        this.addChild(this.slider2, this.slider1);\n\n        if (options.showValue)\n        {\n            this.slider1Text = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.slider1Text.anchor.set(0.5);\n            this.addChild(this.slider1Text);\n        }\n\n        if (options.showValue)\n        {\n            this.slider2Text = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.slider2Text.anchor.set(0.5);\n            this.addChild(this.slider2Text);\n        }\n\n        this.validateSettings();\n\n        this.makeScrollable();\n\n        this.update();\n    }\n\n    private validateSettings()\n    {\n        const { options } = this;\n\n        if (!options.min)\n        {\n            options.min = 0;\n        }\n\n        if (!options.max)\n        {\n            options.max = 100;\n        }\n\n        if (options.value1 < options.min)\n        {\n            options.value1 = options.min;\n        }\n\n        if (options.value2 > options.max)\n        {\n            options.value2 = options.max;\n        }\n\n        this.value1 = options.value1 ?? options.min ?? 0;\n        this.percent1 = (this.value1 * 100) / options.max;\n\n        this.value2 = options.value2 ?? options.min ?? 0;\n        this.percent2 = (this.value2 * 100) / options.max;\n\n        const scale = options.max - options.min;\n\n        const scaledVal1 = this.value1 - options.min;\n        const scaledVal2 = this.value2 - options.min;\n\n        this.percent1 = (scaledVal1 * 100) / scale;\n        this.percent2 = (scaledVal2 * 100) / scale;\n    }\n\n    private makeScrollable()\n    {\n        this.interactive = true;\n        this.slider1.interactive = true;\n        this.slider2.interactive = true;\n        this.bg.interactive = true;\n\n        const { onDragStart1, onDragMove1, onDragEnd1, onSetByClick, onDragStart2, onDragMove2, onDragEnd2 } = this;\n\n        this.slider1\n            .on('pointerdown', onDragStart1, this)\n            .on('pointermove', onDragMove1, this)\n            .on('pointerup', onDragEnd1, this)\n            .on('pointerupoutside', onDragEnd1, this);\n\n        this.slider2\n            .on('pointerdown', onDragStart2, this)\n            .on('pointermove', onDragMove2, this)\n            .on('pointerup', onDragEnd2, this)\n            .on('pointerupoutside', onDragEnd2, this);\n\n        this.bg.on('pointerdown', onSetByClick, this);\n        this.on('pointerupoutside', onDragEnd1, this);\n\n        removeHitBox(this.fill, this.slider1Text, this.slider2Text);\n    }\n\n    private onSetByClick(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        let pos = obj.parent.worldTransform.applyInverse(event.global).x - (this.slider2.width / 2);\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        const maxPos = this.bg.width - this.slider2.width;\n\n        if (pos > maxPos)\n        {\n            pos = maxPos;\n        }\n\n        if (pos < this.slider1.x)\n        {\n            this.setSlider1Val(pos);\n        }\n        else if (pos > this.slider2.x)\n        {\n            this.setSlider2Val(pos);\n        }\n        else\n        {\n            const distToSlider1 = pos - this.slider1.x;\n            const distToSlider2 = this.slider2.x - pos;\n\n            if (distToSlider1 < distToSlider2)\n            {\n                this.setSlider1Val(pos);\n            }\n            else\n            {\n                this.setSlider2Val(pos);\n            }\n        }\n\n        this.update();\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private onDragStart1(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event;\n        this.dragging1 = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove1(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging1)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging1 === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging1 = 2;\n            }\n        }\n\n        if (this.dragging1 === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < 0)\n            {\n                pos = 0;\n            }\n\n            if (pos > this.slider2.x)\n            {\n                pos = this.slider2.x;\n            }\n\n            const maxPos = this.bg.width - this.slider1.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.setSlider1Val(pos);\n\n            this.update();\n        }\n    }\n\n    private setSlider1Val(pos: number)\n    {\n        const maxPos = this.bg.width - this.slider1.width;\n\n        this.percent1 = Math.round((pos / maxPos) * 100);\n        this.value1 = this.options.min + Math.round(((this.options.max - this.options.min) / 100) * this.percent1);\n    }\n\n    private onDragEnd1()\n    {\n        if (!this.dragging1)\n        {\n            return;\n        }\n\n        this.dragging1 = 0;\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private onDragStart2(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event.data;\n        this.dragging2 = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove2(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging2)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging2 === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging2 = 2;\n            }\n        }\n\n        if (this.dragging2 === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < this.slider1.x)\n            {\n                pos = this.slider1.x;\n            }\n\n            const maxPos = this.bg.width - this.slider2.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.setSlider2Val(pos);\n\n            this.update();\n        }\n    }\n\n    private setSlider2Val(pos: number)\n    {\n        const maxPos = this.bg.width - this.slider2.width;\n\n        this.percent2 = Math.round((pos / maxPos) * 100);\n        this.value2 = this.options.min + Math.round(((this.options.max - this.options.min) / 100) * this.percent2);\n    }\n\n    private onDragEnd2()\n    {\n        if (!this.dragging2)\n        {\n            return;\n        }\n\n        this.dragging2 = 0;\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    private update()\n    {\n        const position1 = ((this.bg.width - this.slider1.width) / 100) * this.percent1;\n        const position2 = ((this.bg.width - this.slider2.width) / 100) * this.percent2;\n\n        this.slider1.x = position1;\n        this.slider2.x = position2;\n\n        const startPoint = (this.bg.width / 100) * this.percent1;\n        const endPoint = (this.bg.width / 100) * this.percent2;\n\n        if (this.fillMask)\n        {\n            this.fillMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRect(\n                    startPoint,\n                    0,\n                    endPoint - startPoint,\n                    this.fill.height,\n                );\n        }\n\n        if (this.options.showValue)\n        {\n            this.slider1Text.text = this.value1;\n            this.slider2Text.text = this.value2;\n\n            const slider1PosX = this.slider1.x + (this.slider1.width / 2);\n            const slider1PosY = this.slider1.y;\n\n            this.slider1Text.x = slider1PosX + (this.options.valueTextOffset?.x ?? 0);\n            this.slider1Text.y = slider1PosY + (this.options.valueTextOffset?.y ?? 0);\n\n            const slider2PosX = this.slider2.x + (this.slider2.width / 2);\n            const slider2PosY = this.slider2.y;\n\n            this.slider2Text.x = slider2PosX + (this.options.valueTextOffset?.x ?? 0);\n            this.slider2Text.y = slider2PosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onChange?.emit(this.value1, this.value2);\n    }\n}\n"],"names":[],"mappings":"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"}