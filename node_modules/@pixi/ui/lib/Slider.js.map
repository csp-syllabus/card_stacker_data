{"version":3,"file":"Slider.js","sources":["../src/Slider.ts"],"sourcesContent":["import { Point, Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { removeHitBox } from './utils/helpers/hitbox';\n\nimport type { DragObject } from './utils/HelpTypes';\n\nexport type SliderOptions = {\n    bg: Container | string;\n    slider: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n// TODO: implement vertical slider\n/**\n * Creates a slider\n * @example\n * ```\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n *     valueTextStyle: {\n *         fill: 0xffffff,\n *         fontSize: 22,\n *     },\n *     showValue: true,\n *     valueTextOffset: {\n *         y: -40,\n *     },\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     onChange(`Slider changed > ${value}`);\n * });\n * ```\n */\nexport class Slider extends Container\n{\n    protected readonly bg: Container;\n    protected readonly fill?: Container;\n    protected readonly fillMask?: Graphics;\n    protected readonly slider: Container;\n    protected readonly valueText?: Text;\n\n    private dragging = 0;\n    protected readonly options: SliderOptions;\n\n    /** TODO */\n    public percent = 100;\n    /** TODO */\n    public value = 0;\n    /** TODO */\n    public onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super();\n\n        this.options = options;\n        const bg = typeof options.bg === 'string' ? new Sprite(Texture.from(options.bg)) : options.bg;\n\n        this.bg = new Container();\n        this.bg.addChild(bg);\n\n        this.addChild(this.bg);\n\n        if (options.fill)\n        {\n            const fill = typeof options.fill === 'string' ? new Sprite(Texture.from(options.fill)) : options.fill;\n\n            this.fill = new Container();\n            this.fill.addChild(fill);\n\n            const offsetX = options.fillOffset?.x ?? 0;\n            const offsetY = options.fillOffset?.y ?? 0;\n\n            this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n            this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n            this.fillMask = new Graphics();\n            this.fill.addChild(this.fillMask);\n            this.fill.mask = this.fillMask;\n\n            this.addChild(this.fill);\n        }\n\n        const slider = typeof options.slider === 'string' ? new Sprite(Texture.from(options.slider)) : options.slider;\n\n        slider.x = slider.width / 2;\n\n        this.slider = new Container();\n        this.slider.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        this.slider.y = this.bg.height / 2;\n\n        this.addChild(this.slider);\n\n        if (options.showValue)\n        {\n            this.valueText = new Text(\n                '',\n                options.valueTextStyle || { fill: 0xffffff },\n            );\n            this.valueText.anchor.set(0.5);\n            this.addChild(this.valueText);\n        }\n\n        this.makeScrollable();\n        this.validateSettings();\n        this.update();\n    }\n\n    protected validateSettings()\n    {\n        const { options } = this;\n\n        if (!options.min)\n        {\n            options.min = 0;\n        }\n\n        if (!options.max)\n        {\n            options.max = 100;\n        }\n\n        if (options.value < options.min)\n        {\n            options.value = options.min;\n        }\n\n        if (options.value > options.max)\n        {\n            options.value = options.max;\n        }\n\n        this.value = options.value ?? options.min ?? 0;\n        this.percent = (this.value * 100) / options.max;\n\n        const scale = options.max - options.min;\n        const scaledVal = this.value - options.min;\n\n        this.percent = (scaledVal * 100) / scale;\n    }\n\n    protected makeScrollable()\n    {\n        this.interactive = true;\n        this.slider.interactive = true;\n        this.bg.interactive = true;\n\n        const { onSetByClick, onDragStart, onDragMove, onDragEnd } = this;\n\n        this.slider\n            .on('pointerdown', onDragStart, this)\n            .on('pointermove', onDragMove, this)\n            .on('pointerup', onDragEnd, this)\n            .on('pointerupoutside', onDragEnd, this);\n        this.bg.on('pointerdown', onSetByClick, this);\n        this.on('pointerupoutside', onDragEnd, this);\n\n        removeHitBox(this.fill, this.valueText);\n    }\n\n    protected onSetByClick(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n        let pos = obj.parent.worldTransform.applyInverse(event.global).x - (this.slider.width / 2);\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        if (pos < 0)\n        {\n            pos = 0;\n        }\n\n        const maxPos = this.bg.width - this.slider.width;\n\n        if (pos > maxPos)\n        {\n            pos = maxPos;\n        }\n\n        this.percent = Math.round((pos / maxPos) * 100);\n        this.value = this.options.min + Math.round(\n            ((this.options.max - this.options.min) / 100) * this.percent,\n        );\n\n        this.update();\n\n        this.onChange?.emit(this.value);\n    }\n\n    private onDragStart(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        obj.dragData = event;\n        this.dragging = 1;\n        obj.dragPointerStart = obj.parent.worldTransform.applyInverse(event.global);\n        obj.dragObjStart = new Point();\n        obj.dragObjStart.copyFrom(obj.position);\n        obj.dragGlobalStart = new Point();\n        obj.dragGlobalStart.copyFrom(event.data.global);\n    }\n\n    private onDragMove(event: FederatedPointerEvent)\n    {\n        const obj = event.currentTarget as DragObject;\n\n        if (!this.dragging)\n        {\n            return;\n        }\n\n        const data = obj.dragData; // it can be different pointer!\n\n        if (this.dragging === 1)\n        {\n            // click or drag?\n            if (Math.abs(data.global.x - obj.dragGlobalStart?.x) + Math.abs(data.global.y - obj.dragGlobalStart?.y) >= 3)\n            {\n                // DRAG\n                this.dragging = 2;\n            }\n        }\n\n        if (this.dragging === 2)\n        {\n            const dragPointerEnd = obj.parent.worldTransform.applyInverse(data.global);\n            let pos = obj.dragObjStart.x + (dragPointerEnd.x - obj.dragPointerStart.x);\n\n            if (pos < 0)\n            {\n                pos = 0;\n            }\n\n            const maxPos = this.bg.width - this.slider.width;\n\n            if (pos > maxPos)\n            {\n                pos = maxPos;\n            }\n\n            this.percent = Math.round((pos / maxPos) * 100);\n            this.value = this.options.min + Math.round(\n                ((this.options.max - this.options.min) / 100) * this.percent,\n            );\n\n            this.update();\n        }\n    }\n\n    private onDragEnd()\n    {\n        if (!this.dragging)\n        {\n            return;\n        }\n\n        this.dragging = 0;\n\n        this.onChange?.emit(this.value);\n    }\n\n    protected update(pos?: number)\n    {\n        const position = pos ?? ((this.bg.width - this.slider.width) / 100) * this.percent;\n\n        this.slider.x = position;\n\n        const startPoint = 0;\n        const endPoint = (this.bg.width / 100) * this.percent;\n\n        if (this.fillMask)\n        {\n            this.fillMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRect(\n                    startPoint,\n                    0,\n                    endPoint - startPoint,\n                    this.fill.height,\n                );\n        }\n\n        if (this.options.showValue)\n        {\n            this.valueText.text = this.value;\n\n            const sliderPosX = this.slider.x + (this.slider.width / 2);\n            const sliderPosY = this.slider.y;\n\n            this.valueText.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.valueText.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onChange?.emit(this.value);\n    }\n}\n"],"names":["Container","Signal","Sprite","Texture","Graphics","Text","removeHitBox","Point"],"mappings":"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"}