{"version":3,"file":"MaskedFrame.js","sources":["../src/MaskedFrame.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\n\nexport type MaskedFrameOptions = {\n    target: string | Container;\n    mask: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Applies mask to a container and draws a same shape border around it\n * @example\n * ```\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`),\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n * ```\n */\nexport class MaskedFrame extends Container\n{\n    // private readonly borderMask: Graphics;\n    private border?: Graphics;\n    /** TODO */\n    public target: Container;\n    /** TODO */\n    public targetMask: Container;\n\n    constructor({\n        target,\n        mask,\n        borderWidth,\n        borderColor,\n    }: MaskedFrameOptions)\n    {\n        super();\n\n        this.target = typeof target === 'string' ? new Sprite(Texture.from(target)) : target;\n        this.targetMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask;\n        this.target.addChild(this.targetMask);\n        this.target.mask = this.targetMask;\n\n        if (borderWidth)\n        {\n            this.border = new Graphics()\n                .beginFill(borderColor)\n                .drawRect(\n                    0,\n                    0,\n                    this.target.width + (borderWidth * 2),\n                    this.target.height + (borderWidth * 2),\n                );\n\n            this.target.x = borderWidth;\n            this.target.y = borderWidth;\n\n            const borderMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask.clone();\n\n            borderMask.width += borderWidth * 2;\n            borderMask.height += borderWidth * 2;\n\n            this.border.mask = borderMask;\n            this.border.addChild(borderMask);\n            this.addChild(this.border);\n        }\n\n        this.addChild(this.target);\n    }\n\n    /** TODO */\n    public showBorder()\n    {\n        if (!this.border) return;\n\n        this.border.visible = true;\n    }\n\n    /** TODO */\n    public hideBorder()\n    {\n        if (!this.border) return;\n\n        this.border.visible = false;\n    }\n}\n"],"names":["Container","Sprite","Texture","Graphics"],"mappings":";;;;;;;AAwBO,MAAM,oBAAoBA,iBACjC,CAAA;AAAA,EAQI,WAAY,CAAA;AAAA,IACR,MAAA;AAAA,IACA,IAAA;AAAA,IACA,WAAA;AAAA,IACA,WAAA;AAAA,GAEJ,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AAEN,IAAK,IAAA,CAAA,MAAA,GAAS,OAAO,MAAA,KAAW,QAAW,GAAA,IAAIC,cAAOC,YAAQ,CAAA,IAAA,CAAK,MAAM,CAAC,CAAI,GAAA,MAAA,CAAA;AAC9E,IAAK,IAAA,CAAA,UAAA,GAAa,OAAO,IAAA,KAAS,QAAW,GAAA,IAAID,cAAOC,YAAQ,CAAA,IAAA,CAAK,IAAI,CAAC,CAAI,GAAA,IAAA,CAAA;AAC9E,IAAK,IAAA,CAAA,MAAA,CAAO,QAAS,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,UAAA,CAAA;AAExB,IAAA,IAAI,WACJ,EAAA;AACI,MAAA,IAAA,CAAK,SAAS,IAAIC,iBAAA,EACb,CAAA,SAAA,CAAU,WAAW,CACrB,CAAA,QAAA;AAAA,QACG,CAAA;AAAA,QACA,CAAA;AAAA,QACA,IAAA,CAAK,MAAO,CAAA,KAAA,GAAS,WAAc,GAAA,CAAA;AAAA,QACnC,IAAA,CAAK,MAAO,CAAA,MAAA,GAAU,WAAc,GAAA,CAAA;AAAA,OACxC,CAAA;AAEJ,MAAA,IAAA,CAAK,OAAO,CAAI,GAAA,WAAA,CAAA;AAChB,MAAA,IAAA,CAAK,OAAO,CAAI,GAAA,WAAA,CAAA;AAEhB,MAAA,MAAM,UAAa,GAAA,OAAO,IAAS,KAAA,QAAA,GAAW,IAAIF,aAAA,CAAOC,YAAQ,CAAA,IAAA,CAAK,IAAI,CAAC,CAAI,GAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAE1F,MAAA,UAAA,CAAW,SAAS,WAAc,GAAA,CAAA,CAAA;AAClC,MAAA,UAAA,CAAW,UAAU,WAAc,GAAA,CAAA,CAAA;AAEnC,MAAA,IAAA,CAAK,OAAO,IAAO,GAAA,UAAA,CAAA;AACnB,MAAK,IAAA,CAAA,MAAA,CAAO,SAAS,UAAU,CAAA,CAAA;AAC/B,MAAK,IAAA,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,CAAA;AAAA,GAC7B;AAAA;AAAA,EAGO,UACP,GAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,MAAA;AAAQ,MAAA,OAAA;AAElB,IAAA,IAAA,CAAK,OAAO,OAAU,GAAA,IAAA,CAAA;AAAA,GAC1B;AAAA;AAAA,EAGO,UACP,GAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,MAAA;AAAQ,MAAA,OAAA;AAElB,IAAA,IAAA,CAAK,OAAO,OAAU,GAAA,KAAA,CAAA;AAAA,GAC1B;AACJ;;;;"}