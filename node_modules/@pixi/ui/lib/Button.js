'use strict';

var core = require('@pixi/core');
var display = require('@pixi/display');
var typedSignals = require('typed-signals');

class Button extends display.Container {
  constructor({
    view,
    hoverView,
    pressedView,
    disabledView,
    textView,
    padding,
    textOffset
  }) {
    super();
    this.padding = 0;
    if (padding) {
      this.padding = padding * 2;
    }
    this.defaultView = view;
    this.defaultView.zIndex = 1;
    this.addChild(this.defaultView);
    if (hoverView) {
      this.hoverView = hoverView;
      this.hoverView.zIndex = 2;
      this.addChild(this.hoverView);
      this.hoverView.visible = false;
    }
    if (pressedView) {
      this.pressedView = pressedView;
      this.pressedView.zIndex = 3;
      this.addChild(this.pressedView);
      this.pressedView.visible = false;
    }
    if (disabledView) {
      this.disabledView = disabledView;
      this.disabledView.zIndex = 4;
      this.addChild(this.disabledView);
      this.disabledView.visible = false;
    }
    if (textView) {
      this.text = textView;
      this.text.zIndex = 4;
      textView.anchor.set(0.5);
      textView.x = this.width / 2 + (textOffset?.x ?? 0);
      textView.y = this.height / 2 + (textOffset?.y ?? 0);
      this.addChild(this.text);
      if (textView.width + this.padding > this.defaultView?.width) {
        const maxWidth = this.defaultView?.width;
        textView.scale.set(maxWidth / (textView.width + this.padding));
      }
    }
    this._enabled = true;
    this.onPress = new typedSignals.Signal();
    this.onDown = new typedSignals.Signal();
    this.onUp = new typedSignals.Signal();
    this.onHover = new typedSignals.Signal();
    this.onOut = new typedSignals.Signal();
    this.onUpOut = new typedSignals.Signal();
    this.on("pointerdown", (e) => {
      this._isDown = true;
      this.onDown.emit(this, e);
    });
    this.on("pointerup", (e) => {
      this._processUp(e);
    });
    this.on("pointerupoutside", (e) => {
      this._processUpOut(e);
    });
    this.on("pointertap", (e) => {
      this._isDown = false;
      this.onPress.emit(this, e);
    });
    this.on("pointerover", (e) => {
      this.onHover.emit(this, e);
    });
    this.on("pointerout", (e) => {
      this._processOut(e);
    });
    this.onDown.connect((_btn, e) => {
      this.down(e);
      if (this.pressedView) {
        this.pressedView.visible = true;
      }
    });
    this.onUp.connect((_btn, e) => {
      this.up(e);
      if (this.pressedView) {
        this.pressedView.visible = false;
      }
    });
    this.onUpOut.connect((_bth, e) => {
      this._upOut(e);
      if (this.pressedView) {
        this.pressedView.visible = false;
      }
    });
    if (!core.utils.isMobile.any) {
      this.onHover.connect((_bth, e) => {
        if (this.hoverView) {
          this.hoverView.visible = true;
        }
        this.hover(e);
      });
    }
    this.onOut.connect((_bth, e) => {
      if (this.hoverView) {
        this.hoverView.visible = false;
      }
      this._out(e);
    });
    this._isDown = false;
    this.enabled = true;
  }
  /**
   * TODO
   * @param _e
   */
  down(_e) {
  }
  /**
   * TODO
   * @param _e
   */
  up(_e) {
  }
  /**
   * TODO
   * @param _e
   */
  hover(_e) {
  }
  /** TODO */
  getText() {
    return this.text.text;
  }
  /** TODO */
  get isDown() {
    return this._isDown;
  }
  /** TODO */
  set enabled(value) {
    this._enabled = value;
    this.interactive = value;
    this.cursor = value ? "pointer" : "default";
    if (this.disabledView) {
      this.disabledView.visible = !value;
    }
    if (!value) {
      this._processUp();
    }
  }
  /** TODO */
  get enabled() {
    return this._enabled;
  }
  /** TODO */
  set shown(value) {
    this._shown = value;
    this.enabled = value;
    if (this.defaultView) {
      this.defaultView.visible = value;
    }
  }
  /** TODO */
  get shown() {
    return this._shown;
  }
  _processUp(e) {
    if (this._isDown) {
      this.onUp.emit(this, e);
    }
    this._isDown = false;
  }
  _processUpOut(e) {
    if (this._isDown) {
      this.onUpOut.emit(this, e);
    }
    if (this.pressedView) {
      this.pressedView.visible = false;
    }
    this._isDown = false;
  }
  _processOut(e) {
    this.onOut.emit(this, e);
    this._isDown = false;
  }
  _upOut(e) {
    this.up(e);
  }
  _out(e) {
    this.up(e);
  }
}

exports.Button = Button;
//# sourceMappingURL=Button.js.map
