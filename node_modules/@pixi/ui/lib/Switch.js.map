{"version":3,"file":"Switch.js","sources":["../src/Switch.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { Button } from './Button';\n\n/**\n * Container based component that switches visibility of containers by click.\n *\n * Can be used for creating tabs, radio buttons, checkboxes etc.\n * @example\n * ```\n * const switch = new Switch([\n *     new PixiSprite(Texture.from(`switch_off.png`)),\n *     new PixiSprite(Texture.from(`switch_on.png`)),\n * ]);\n *\n * ```\n */\nexport class Switch extends Container\n{\n    /** TODO */\n    public view = new Container();\n    /** TODO */\n    public views: Container[] = [];\n    /** TODO */\n    public activeViewID = 0;\n    /** TODO */\n    public onChange: Signal<(state: number) => void>;\n    private button: Button;\n\n    constructor(views: Container[], activeViewID = 0)\n    {\n        super();\n\n        views.forEach((state, id) =>\n        {\n            this.view.addChild(state);\n\n            state.visible = id === this.activeViewID;\n        });\n\n        this.views = views;\n        this.activeViewID = activeViewID;\n\n        this.button = new Button({ view: this.view });\n\n        this.addChild(this.button);\n\n        this.onChange = new Signal();\n\n        this.button.onPress.connect(() =>\n        {\n            this.switch();\n            this.onChange.emit(this.activeViewID);\n        });\n    }\n\n    /** TODO */\n    public get activeView(): Container\n    {\n        return this.views[this.activeViewID];\n    }\n\n    /**\n     * TODO\n     * @param id\n     */\n    public switch(id?: number): void\n    {\n        this.activeView.visible = false;\n        this.activeViewID = id === undefined ? this.activeViewID + 1 : id;\n\n        if (this.activeViewID > this.views.length - 1)\n        {\n            this.activeViewID = 0;\n        }\n\n        const newState = this.views[this.activeViewID];\n\n        newState.visible = true;\n    }\n}\n"],"names":["Container","Button","Signal"],"mappings":";;;;;;AAiBO,MAAM,eAAeA,iBAC5B,CAAA;AAAA,EAWI,WAAA,CAAY,KAAoB,EAAA,YAAA,GAAe,CAC/C,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AAXV;AAAA,IAAO,IAAA,CAAA,IAAA,GAAO,IAAIA,iBAAU,EAAA,CAAA;AAE5B;AAAA,IAAA,IAAA,CAAO,QAAqB,EAAC,CAAA;AAE7B;AAAA,IAAA,IAAA,CAAO,YAAe,GAAA,CAAA,CAAA;AASlB,IAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,KAAA,EAAO,EACtB,KAAA;AACI,MAAK,IAAA,CAAA,IAAA,CAAK,SAAS,KAAK,CAAA,CAAA;AAExB,MAAM,KAAA,CAAA,OAAA,GAAU,OAAO,IAAK,CAAA,YAAA,CAAA;AAAA,KAC/B,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,YAAe,GAAA,YAAA,CAAA;AAEpB,IAAA,IAAA,CAAK,SAAS,IAAIC,aAAA,CAAO,EAAE,IAAM,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAE5C,IAAK,IAAA,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,CAAA;AAEzB,IAAK,IAAA,CAAA,QAAA,GAAW,IAAIC,mBAAO,EAAA,CAAA;AAE3B,IAAK,IAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,OAAA,CAAQ,MAC5B;AACI,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,MAAK,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AAAA,KACvC,CAAA,CAAA;AAAA,GACL;AAAA;AAAA,EAGA,IAAW,UACX,GAAA;AACI,IAAO,OAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AAAA,GACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,OAAO,EACd,EAAA;AACI,IAAA,IAAA,CAAK,WAAW,OAAU,GAAA,KAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,YAAe,GAAA,EAAA,KAAO,KAAY,CAAA,GAAA,IAAA,CAAK,eAAe,CAAI,GAAA,EAAA,CAAA;AAE/D,IAAA,IAAI,IAAK,CAAA,YAAA,GAAe,IAAK,CAAA,KAAA,CAAM,SAAS,CAC5C,EAAA;AACI,MAAA,IAAA,CAAK,YAAe,GAAA,CAAA,CAAA;AAAA,KACxB;AAEA,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AAE7C,IAAA,QAAA,CAAS,OAAU,GAAA,IAAA,CAAA;AAAA,GACvB;AACJ;;;;"}