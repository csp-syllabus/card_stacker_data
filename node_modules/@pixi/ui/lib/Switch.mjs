import { Container } from '@pixi/display';
import { Signal } from 'typed-signals';
import { Button } from './Button.mjs';

class Switch extends Container {
  constructor(views, activeViewID = 0) {
    super();
    /** TODO */
    this.view = new Container();
    /** TODO */
    this.views = [];
    /** TODO */
    this.activeViewID = 0;
    views.forEach((state, id) => {
      this.view.addChild(state);
      state.visible = id === this.activeViewID;
    });
    this.views = views;
    this.activeViewID = activeViewID;
    this.button = new Button({ view: this.view });
    this.addChild(this.button);
    this.onChange = new Signal();
    this.button.onPress.connect(() => {
      this.switch();
      this.onChange.emit(this.activeViewID);
    });
  }
  /** TODO */
  get activeView() {
    return this.views[this.activeViewID];
  }
  /**
   * TODO
   * @param id
   */
  switch(id) {
    this.activeView.visible = false;
    this.activeViewID = id === void 0 ? this.activeViewID + 1 : id;
    if (this.activeViewID > this.views.length - 1) {
      this.activeViewID = 0;
    }
    const newState = this.views[this.activeViewID];
    newState.visible = true;
  }
}

export { Switch };
//# sourceMappingURL=Switch.mjs.map
