import { Texture } from '@pixi/core';
import { Container } from '@pixi/display';
import { Graphics } from '@pixi/graphics';
import { Sprite } from '@pixi/sprite';
import { Signal } from 'typed-signals';
import { CheckBox } from './CheckBox.mjs';
import { Layout } from './Layout.mjs';

class RadioGroup extends Container {
  constructor(options) {
    super();
    this.items = [];
    this.options = options;
    this.value = options.items[options.selectedItem];
    this.selected = options.selectedItem;
    this.view = new Layout({
      type: options.type,
      elementsMargin: options.elementsMargin
    });
    options.items.forEach((item, id) => {
      const unchecked = typeof options.style.bg === "string" ? new Sprite(Texture.from(options.style.bg)) : this.getGraphics(options.style.bg);
      const checked = typeof options.style.checked === "string" ? new Sprite(Texture.from(options.style.checked)) : this.getGraphics(options.style.checked);
      const checkBox = new CheckBox({
        text: item,
        checked: options.selectedItem === id,
        style: {
          unchecked,
          checked,
          text: options.style.textStyle
        }
      });
      this.view.addChild(checkBox);
      checkBox.onChange.connect(() => this.selectItem(id));
      this.items.push(checkBox);
      this.view.addChild(checkBox);
    });
    this.onChange = new Signal();
  }
  getGraphics({
    color,
    fillColor,
    width,
    height,
    radius,
    padding
  }) {
    const graphics = new Graphics().beginFill(color);
    const isCircle = width === height && radius >= width / 2;
    isCircle ? graphics.drawCircle(width / 2, width / 2, width / 2) : graphics.drawRoundedRect(0, 0, width, height, radius);
    if (fillColor !== void 0) {
      graphics.beginFill(fillColor);
      const center = width / 2;
      if (isCircle) {
        graphics.drawCircle(center, center, center - padding);
      } else {
        graphics.drawRoundedRect(
          padding,
          padding,
          width - padding * 2,
          height - padding * 2,
          radius
        );
      }
    }
    return graphics;
  }
  /**
   * TODO
   * @param id
   */
  selectItem(id) {
    this.selected = id;
    this.items.map((item) => item.checked = false);
    this.items[id].checked = true;
    this.value = this.options.items[this.selected];
    this.onChange.emit(this.selected, this.value);
  }
}

export { RadioGroup };
//# sourceMappingURL=RadioGroup.mjs.map
