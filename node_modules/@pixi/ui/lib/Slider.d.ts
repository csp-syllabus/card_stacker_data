import { Container } from '@pixi/display';
import { FederatedPointerEvent } from '@pixi/events';
import { Graphics } from '@pixi/graphics';
import { ITextStyle, Text, TextStyle } from '@pixi/text';
import { Signal } from 'typed-signals';
export type SliderOptions = {
    bg: Container | string;
    slider: Container | string;
    fill?: Container | string;
    min?: number;
    max?: number;
    value?: number;
    valueTextStyle?: TextStyle | Partial<ITextStyle>;
    showValue?: boolean;
    valueTextOffset?: {
        x?: number;
        y?: number;
    };
    fillOffset?: {
        x?: number;
        y?: number;
    };
};
/**
 * Creates a slider
 * @example
 * ```
 * new Slider({
 *     bg: 'slider_bg.png',
 *     fill: 'slider.png',
 *     slider: 'slider.png',
 *     min: 0,
 *     max: 100,
 *     value: 50,
 *     valueTextStyle: {
 *         fill: 0xffffff,
 *         fontSize: 22,
 *     },
 *     showValue: true,
 *     valueTextOffset: {
 *         y: -40,
 *     },
 * });
 *
 * singleSlider.onChange.connect((value) => {
 *     onChange(`Slider changed > ${value}`);
 * });
 * ```
 */
export declare class Slider extends Container {
    protected readonly bg: Container;
    protected readonly fill?: Container;
    protected readonly fillMask?: Graphics;
    protected readonly slider: Container;
    protected readonly valueText?: Text;
    private dragging;
    protected readonly options: SliderOptions;
    /** TODO */
    percent: number;
    /** TODO */
    value: number;
    /** TODO */
    onChange: Signal<(value: number) => void>;
    constructor(options: SliderOptions);
    protected validateSettings(): void;
    protected makeScrollable(): void;
    protected onSetByClick(event: FederatedPointerEvent): void;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    protected update(pos?: number): void;
}
//# sourceMappingURL=Slider.d.ts.map