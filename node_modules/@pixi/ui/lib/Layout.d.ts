import { Container } from '@pixi/display';
export type LayoutType = 'horizontal' | 'vertical';
export type LayoutOptions = {
    elementsMargin?: number;
    children?: Container[];
    vertPadding?: number;
    horPadding?: number;
};
/**
 * Container based element for arranging pixi containers inside it basing on their sizes
 * @example
 * ```
 * const layout = new Layout({
 *    type: 'horizontal',
 *    elementsMargin: 10,
 *    children: [
        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),
        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 100, 100),
 *    ],
 * });
 *
 * layout.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));
 * ```
 */
export declare class Layout extends Container {
    /** TODO */
    view: Container;
    /** TODO */
    type: LayoutType;
    /** TODO */
    w: number;
    /** TODO */
    h: number;
    /** TODO */
    readonly children: Container[];
    private readonly options?;
    constructor(options?: {
        type?: LayoutType;
    } & LayoutOptions);
    protected onChildrenChange(): void;
}
/**
 * Helper to generate horizontal Layout for arranging pixi containers horizontally basing on their sizes
 * @param elementsMargin
 * @param {...any} params
 * @example
 * ```
 * row(15, // margins between elements
 *     logo, // pregenerated Layout
 *     menu, // pregenerated Layout
 *     loginForm // pregenerated Layout
 * );
 * ```
 */
export declare function row(elementsMargin: number, ...params: Container[]): Layout;
/**
 * Helper to generate vertical Layout for arranging pixi containers vertically basing on their sizes
 * @param elementsMargin
 * @param {...any} params
 * @example
 * ```
 * col(15, // margins between elements
 *     logo, // pregenerated Layout
 *     menu, // pregenerated Layout
 *     loginForm // pregenerated Layout
 * );
 * ```
 */
export declare function col(elementsMargin: number, ...params: Container[]): Layout;
//# sourceMappingURL=Layout.d.ts.map