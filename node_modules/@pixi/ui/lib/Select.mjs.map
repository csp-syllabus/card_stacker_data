{"version":3,"file":"Select.mjs","sources":["../src/Select.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Button } from './Button';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG?: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container based component that gives us a selection dropdown.\n * It is a composition of a [[Button]] and a [[ScrollBox]].\n *\n * !!! Important\n * In order scroll to work, you have to call update() method in your game loop.\n * @example\n * ```\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *         textStyle: { fill: 0xffffff, fontSize: 20 },,\n *         radius: 25,\n *     },\n *     selectedTextOffset: {\n *         y: -13,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *         offset: {\n *             y: -16,\n *             x: 24,\n *         },\n *     },\n * });\n *\n * ```\n */\nexport class Select extends Container\n{\n    private readonly closedBG: Container;\n    private readonly openBG: Container;\n    /** TODO */\n    public selectedText: Text;\n    /** TODO */\n    public value: number;\n    /** TODO */\n    public onSelect: Signal<(value: number, text: string) => void>;\n\n    private scrollBox: ScrollBox;\n\n    constructor({\n        closedBG,\n        textStyle,\n        items,\n        openBG,\n        selected,\n        selectedTextOffset,\n        scrollBox,\n    }: SelectOptions)\n    {\n        super();\n\n        this.closedBG = typeof closedBG === 'string' ? new Sprite(Texture.from(closedBG)) : closedBG;\n        this.openBG = typeof openBG === 'string' ? new Sprite(Texture.from(openBG)) : openBG;\n        this.openBG.visible = false;\n\n        this.addChild(this.closedBG, this.openBG);\n\n        const openButton = new Button({\n            view: this.closedBG,\n        });\n\n        this.addChild(openButton);\n\n        openButton.onPress.connect(() => this.toggle());\n\n        this.selectedText = new Text(\n            items?.items ? items.items[0] : '',\n            textStyle,\n        );\n\n        const selectedTextButton = new Button({\n            view: this.selectedText,\n        });\n\n        selectedTextButton.onPress.connect(() => this.toggle());\n\n        this.addChild(selectedTextButton);\n\n        this.selectedText.anchor.set(0.5);\n        this.selectedText.x = (this.closedBG.width / 2) + (selectedTextOffset?.x || 0);\n        this.selectedText.y = (this.closedBG.height / 2) + (selectedTextOffset?.y || 0);\n\n        this.scrollBox = new ScrollBox({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.closedBG.width,\n            height: this.closedBG.height * 5,\n            radius: 0,\n            padding: 0,\n            ...scrollBox,\n        });\n\n        this.openBG.addChild(this.scrollBox);\n\n        this.scrollBox.y = this.closedBG.height;\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x += scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.onSelect = new Signal();\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.getText();\n\n            if (id === selected)\n            {\n                this.selectedText.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.selectedText.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** TODO */\n    public toggle()\n    {\n        this.openBG.visible = !this.openBG.visible;\n        this.closedBG.visible = !this.closedBG.visible;\n    }\n\n    /** TODO */\n    public open()\n    {\n        this.openBG.visible = true;\n        this.closedBG.visible = false;\n    }\n\n    /** TODO */\n    public close()\n    {\n        this.openBG.visible = false;\n        this.closedBG.visible = true;\n    }\n\n    private convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius,\n    }: SelectItemsOptions): Button[]\n    {\n        const buttons: Button[] = [];\n\n        items.forEach((item) =>\n        {\n            const view = new Graphics()\n                .beginFill(backgroundColor)\n                .drawRoundedRect(0, 0, width, height, radius);\n            const hoverView = new Graphics()\n                .beginFill(hoverColor ?? backgroundColor)\n                .drawRoundedRect(0, 0, width, height, radius);\n            const textView = new Text(item, textStyle);\n\n            const button = new Button({ view, hoverView, textView });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n\n    /** TODO */\n    public update()\n    {\n        this.scrollBox.update();\n    }\n}\n"],"names":[],"mappings":"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"}